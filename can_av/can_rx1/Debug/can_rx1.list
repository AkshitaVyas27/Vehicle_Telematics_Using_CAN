
can_rx1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045f4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004784  08004784  00005784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047fc  080047fc  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  080047fc  080047fc  000057fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004804  08004804  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004804  08004804  00005804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004808  08004808  00005808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800480c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000605c  2**0
                  CONTENTS
 10 .bss          00000290  2000005c  2000005c  0000605c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002ec  200002ec  0000605c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000be73  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a4f  00000000  00000000  00011eff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a70  00000000  00000000  00013950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000082b  00000000  00000000  000143c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020cef  00000000  00000000  00014beb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c8e8  00000000  00000000  000358da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7aaa  00000000  00000000  000421c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00109c6c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003248  00000000  00000000  00109cb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000049  00000000  00000000  0010cef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800476c 	.word	0x0800476c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	0800476c 	.word	0x0800476c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b10:	f000 b96a 	b.w	8000de8 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9d08      	ldr	r5, [sp, #32]
 8000b32:	460c      	mov	r4, r1
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d14e      	bne.n	8000bd6 <__udivmoddi4+0xaa>
 8000b38:	4694      	mov	ip, r2
 8000b3a:	458c      	cmp	ip, r1
 8000b3c:	4686      	mov	lr, r0
 8000b3e:	fab2 f282 	clz	r2, r2
 8000b42:	d962      	bls.n	8000c0a <__udivmoddi4+0xde>
 8000b44:	b14a      	cbz	r2, 8000b5a <__udivmoddi4+0x2e>
 8000b46:	f1c2 0320 	rsb	r3, r2, #32
 8000b4a:	4091      	lsls	r1, r2
 8000b4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b54:	4319      	orrs	r1, r3
 8000b56:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b5a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b5e:	fa1f f68c 	uxth.w	r6, ip
 8000b62:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b66:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b6a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b72:	fb04 f106 	mul.w	r1, r4, r6
 8000b76:	4299      	cmp	r1, r3
 8000b78:	d90a      	bls.n	8000b90 <__udivmoddi4+0x64>
 8000b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b82:	f080 8112 	bcs.w	8000daa <__udivmoddi4+0x27e>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	f240 810f 	bls.w	8000daa <__udivmoddi4+0x27e>
 8000b8c:	3c02      	subs	r4, #2
 8000b8e:	4463      	add	r3, ip
 8000b90:	1a59      	subs	r1, r3, r1
 8000b92:	fa1f f38e 	uxth.w	r3, lr
 8000b96:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b9a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba2:	fb00 f606 	mul.w	r6, r0, r6
 8000ba6:	429e      	cmp	r6, r3
 8000ba8:	d90a      	bls.n	8000bc0 <__udivmoddi4+0x94>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000bb2:	f080 80fc 	bcs.w	8000dae <__udivmoddi4+0x282>
 8000bb6:	429e      	cmp	r6, r3
 8000bb8:	f240 80f9 	bls.w	8000dae <__udivmoddi4+0x282>
 8000bbc:	4463      	add	r3, ip
 8000bbe:	3802      	subs	r0, #2
 8000bc0:	1b9b      	subs	r3, r3, r6
 8000bc2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	b11d      	cbz	r5, 8000bd2 <__udivmoddi4+0xa6>
 8000bca:	40d3      	lsrs	r3, r2
 8000bcc:	2200      	movs	r2, #0
 8000bce:	e9c5 3200 	strd	r3, r2, [r5]
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d905      	bls.n	8000be6 <__udivmoddi4+0xba>
 8000bda:	b10d      	cbz	r5, 8000be0 <__udivmoddi4+0xb4>
 8000bdc:	e9c5 0100 	strd	r0, r1, [r5]
 8000be0:	2100      	movs	r1, #0
 8000be2:	4608      	mov	r0, r1
 8000be4:	e7f5      	b.n	8000bd2 <__udivmoddi4+0xa6>
 8000be6:	fab3 f183 	clz	r1, r3
 8000bea:	2900      	cmp	r1, #0
 8000bec:	d146      	bne.n	8000c7c <__udivmoddi4+0x150>
 8000bee:	42a3      	cmp	r3, r4
 8000bf0:	d302      	bcc.n	8000bf8 <__udivmoddi4+0xcc>
 8000bf2:	4290      	cmp	r0, r2
 8000bf4:	f0c0 80f0 	bcc.w	8000dd8 <__udivmoddi4+0x2ac>
 8000bf8:	1a86      	subs	r6, r0, r2
 8000bfa:	eb64 0303 	sbc.w	r3, r4, r3
 8000bfe:	2001      	movs	r0, #1
 8000c00:	2d00      	cmp	r5, #0
 8000c02:	d0e6      	beq.n	8000bd2 <__udivmoddi4+0xa6>
 8000c04:	e9c5 6300 	strd	r6, r3, [r5]
 8000c08:	e7e3      	b.n	8000bd2 <__udivmoddi4+0xa6>
 8000c0a:	2a00      	cmp	r2, #0
 8000c0c:	f040 8090 	bne.w	8000d30 <__udivmoddi4+0x204>
 8000c10:	eba1 040c 	sub.w	r4, r1, ip
 8000c14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c18:	fa1f f78c 	uxth.w	r7, ip
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb08 4416 	mls	r4, r8, r6, r4
 8000c2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c2e:	fb07 f006 	mul.w	r0, r7, r6
 8000c32:	4298      	cmp	r0, r3
 8000c34:	d908      	bls.n	8000c48 <__udivmoddi4+0x11c>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000c3e:	d202      	bcs.n	8000c46 <__udivmoddi4+0x11a>
 8000c40:	4298      	cmp	r0, r3
 8000c42:	f200 80cd 	bhi.w	8000de0 <__udivmoddi4+0x2b4>
 8000c46:	4626      	mov	r6, r4
 8000c48:	1a1c      	subs	r4, r3, r0
 8000c4a:	fa1f f38e 	uxth.w	r3, lr
 8000c4e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c52:	fb08 4410 	mls	r4, r8, r0, r4
 8000c56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c5a:	fb00 f707 	mul.w	r7, r0, r7
 8000c5e:	429f      	cmp	r7, r3
 8000c60:	d908      	bls.n	8000c74 <__udivmoddi4+0x148>
 8000c62:	eb1c 0303 	adds.w	r3, ip, r3
 8000c66:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c6a:	d202      	bcs.n	8000c72 <__udivmoddi4+0x146>
 8000c6c:	429f      	cmp	r7, r3
 8000c6e:	f200 80b0 	bhi.w	8000dd2 <__udivmoddi4+0x2a6>
 8000c72:	4620      	mov	r0, r4
 8000c74:	1bdb      	subs	r3, r3, r7
 8000c76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7a:	e7a5      	b.n	8000bc8 <__udivmoddi4+0x9c>
 8000c7c:	f1c1 0620 	rsb	r6, r1, #32
 8000c80:	408b      	lsls	r3, r1
 8000c82:	fa22 f706 	lsr.w	r7, r2, r6
 8000c86:	431f      	orrs	r7, r3
 8000c88:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c8c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c90:	ea43 030c 	orr.w	r3, r3, ip
 8000c94:	40f4      	lsrs	r4, r6
 8000c96:	fa00 f801 	lsl.w	r8, r0, r1
 8000c9a:	0c38      	lsrs	r0, r7, #16
 8000c9c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ca0:	fbb4 fef0 	udiv	lr, r4, r0
 8000ca4:	fa1f fc87 	uxth.w	ip, r7
 8000ca8:	fb00 441e 	mls	r4, r0, lr, r4
 8000cac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cb0:	fb0e f90c 	mul.w	r9, lr, ip
 8000cb4:	45a1      	cmp	r9, r4
 8000cb6:	fa02 f201 	lsl.w	r2, r2, r1
 8000cba:	d90a      	bls.n	8000cd2 <__udivmoddi4+0x1a6>
 8000cbc:	193c      	adds	r4, r7, r4
 8000cbe:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000cc2:	f080 8084 	bcs.w	8000dce <__udivmoddi4+0x2a2>
 8000cc6:	45a1      	cmp	r9, r4
 8000cc8:	f240 8081 	bls.w	8000dce <__udivmoddi4+0x2a2>
 8000ccc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cd0:	443c      	add	r4, r7
 8000cd2:	eba4 0409 	sub.w	r4, r4, r9
 8000cd6:	fa1f f983 	uxth.w	r9, r3
 8000cda:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cde:	fb00 4413 	mls	r4, r0, r3, r4
 8000ce2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ce6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cea:	45a4      	cmp	ip, r4
 8000cec:	d907      	bls.n	8000cfe <__udivmoddi4+0x1d2>
 8000cee:	193c      	adds	r4, r7, r4
 8000cf0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000cf4:	d267      	bcs.n	8000dc6 <__udivmoddi4+0x29a>
 8000cf6:	45a4      	cmp	ip, r4
 8000cf8:	d965      	bls.n	8000dc6 <__udivmoddi4+0x29a>
 8000cfa:	3b02      	subs	r3, #2
 8000cfc:	443c      	add	r4, r7
 8000cfe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d02:	fba0 9302 	umull	r9, r3, r0, r2
 8000d06:	eba4 040c 	sub.w	r4, r4, ip
 8000d0a:	429c      	cmp	r4, r3
 8000d0c:	46ce      	mov	lr, r9
 8000d0e:	469c      	mov	ip, r3
 8000d10:	d351      	bcc.n	8000db6 <__udivmoddi4+0x28a>
 8000d12:	d04e      	beq.n	8000db2 <__udivmoddi4+0x286>
 8000d14:	b155      	cbz	r5, 8000d2c <__udivmoddi4+0x200>
 8000d16:	ebb8 030e 	subs.w	r3, r8, lr
 8000d1a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d1e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d22:	40cb      	lsrs	r3, r1
 8000d24:	431e      	orrs	r6, r3
 8000d26:	40cc      	lsrs	r4, r1
 8000d28:	e9c5 6400 	strd	r6, r4, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	e750      	b.n	8000bd2 <__udivmoddi4+0xa6>
 8000d30:	f1c2 0320 	rsb	r3, r2, #32
 8000d34:	fa20 f103 	lsr.w	r1, r0, r3
 8000d38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d3c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d40:	4094      	lsls	r4, r2
 8000d42:	430c      	orrs	r4, r1
 8000d44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d48:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d4c:	fa1f f78c 	uxth.w	r7, ip
 8000d50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d54:	fb08 3110 	mls	r1, r8, r0, r3
 8000d58:	0c23      	lsrs	r3, r4, #16
 8000d5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5e:	fb00 f107 	mul.w	r1, r0, r7
 8000d62:	4299      	cmp	r1, r3
 8000d64:	d908      	bls.n	8000d78 <__udivmoddi4+0x24c>
 8000d66:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d6e:	d22c      	bcs.n	8000dca <__udivmoddi4+0x29e>
 8000d70:	4299      	cmp	r1, r3
 8000d72:	d92a      	bls.n	8000dca <__udivmoddi4+0x29e>
 8000d74:	3802      	subs	r0, #2
 8000d76:	4463      	add	r3, ip
 8000d78:	1a5b      	subs	r3, r3, r1
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d80:	fb08 3311 	mls	r3, r8, r1, r3
 8000d84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d88:	fb01 f307 	mul.w	r3, r1, r7
 8000d8c:	42a3      	cmp	r3, r4
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x276>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d98:	d213      	bcs.n	8000dc2 <__udivmoddi4+0x296>
 8000d9a:	42a3      	cmp	r3, r4
 8000d9c:	d911      	bls.n	8000dc2 <__udivmoddi4+0x296>
 8000d9e:	3902      	subs	r1, #2
 8000da0:	4464      	add	r4, ip
 8000da2:	1ae4      	subs	r4, r4, r3
 8000da4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000da8:	e739      	b.n	8000c1e <__udivmoddi4+0xf2>
 8000daa:	4604      	mov	r4, r0
 8000dac:	e6f0      	b.n	8000b90 <__udivmoddi4+0x64>
 8000dae:	4608      	mov	r0, r1
 8000db0:	e706      	b.n	8000bc0 <__udivmoddi4+0x94>
 8000db2:	45c8      	cmp	r8, r9
 8000db4:	d2ae      	bcs.n	8000d14 <__udivmoddi4+0x1e8>
 8000db6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dba:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dbe:	3801      	subs	r0, #1
 8000dc0:	e7a8      	b.n	8000d14 <__udivmoddi4+0x1e8>
 8000dc2:	4631      	mov	r1, r6
 8000dc4:	e7ed      	b.n	8000da2 <__udivmoddi4+0x276>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	e799      	b.n	8000cfe <__udivmoddi4+0x1d2>
 8000dca:	4630      	mov	r0, r6
 8000dcc:	e7d4      	b.n	8000d78 <__udivmoddi4+0x24c>
 8000dce:	46d6      	mov	lr, sl
 8000dd0:	e77f      	b.n	8000cd2 <__udivmoddi4+0x1a6>
 8000dd2:	4463      	add	r3, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	e74d      	b.n	8000c74 <__udivmoddi4+0x148>
 8000dd8:	4606      	mov	r6, r0
 8000dda:	4623      	mov	r3, r4
 8000ddc:	4608      	mov	r0, r1
 8000dde:	e70f      	b.n	8000c00 <__udivmoddi4+0xd4>
 8000de0:	3e02      	subs	r6, #2
 8000de2:	4463      	add	r3, ip
 8000de4:	e730      	b.n	8000c48 <__udivmoddi4+0x11c>
 8000de6:	bf00      	nop

08000de8 <__aeabi_idiv0>:
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop

08000dec <HAL_CAN_RxFifo1MsgPendingCallback>:
uint32_t TxMailbox;

//int datacheck = 0;


void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8000df4:	4b0e      	ldr	r3, [pc, #56]	@ (8000e30 <HAL_CAN_RxFifo1MsgPendingCallback+0x44>)
 8000df6:	4a0f      	ldr	r2, [pc, #60]	@ (8000e34 <HAL_CAN_RxFifo1MsgPendingCallback+0x48>)
 8000df8:	2101      	movs	r1, #1
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f000 ffee 	bl	8001ddc <HAL_CAN_GetRxMessage>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000e00:	2201      	movs	r2, #1
 8000e02:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e06:	480c      	ldr	r0, [pc, #48]	@ (8000e38 <HAL_CAN_RxFifo1MsgPendingCallback+0x4c>)
 8000e08:	f001 fe0e 	bl	8002a28 <HAL_GPIO_WritePin>
	if(RxHeader.DLC == 3)
 8000e0c:	4b09      	ldr	r3, [pc, #36]	@ (8000e34 <HAL_CAN_RxFifo1MsgPendingCallback+0x48>)
 8000e0e:	691b      	ldr	r3, [r3, #16]
 8000e10:	2b03      	cmp	r3, #3
 8000e12:	d102      	bne.n	8000e1a <HAL_CAN_RxFifo1MsgPendingCallback+0x2e>
		datacheck = 1;
 8000e14:	4b09      	ldr	r3, [pc, #36]	@ (8000e3c <HAL_CAN_RxFifo1MsgPendingCallback+0x50>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e20:	4805      	ldr	r0, [pc, #20]	@ (8000e38 <HAL_CAN_RxFifo1MsgPendingCallback+0x4c>)
 8000e22:	f001 fe01 	bl	8002a28 <HAL_GPIO_WritePin>

}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000190 	.word	0x20000190
 8000e34:	2000016c 	.word	0x2000016c
 8000e38:	40020c00 	.word	0x40020c00
 8000e3c:	20000150 	.word	0x20000150

08000e40 <Calculate_Speed>:


void Calculate_Speed(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
    // Calculate the change in distance
    int16_t distanceChange = RxData[2] - previousDistance;
 8000e46:	4b21      	ldr	r3, [pc, #132]	@ (8000ecc <Calculate_Speed+0x8c>)
 8000e48:	789b      	ldrb	r3, [r3, #2]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	4b20      	ldr	r3, [pc, #128]	@ (8000ed0 <Calculate_Speed+0x90>)
 8000e4e:	881b      	ldrh	r3, [r3, #0]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	80fb      	strh	r3, [r7, #6]

    // Get the current time in milliseconds
    currentTime = HAL_GetTick();
 8000e56:	f000 fca1 	bl	800179c <HAL_GetTick>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ed4 <Calculate_Speed+0x94>)
 8000e5e:	6013      	str	r3, [r2, #0]

    // Calculate the time interval (in seconds)
    float timeInterval = (currentTime - previousTime) / 1000.0f; // Convert ms to seconds
 8000e60:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed4 <Calculate_Speed+0x94>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed8 <Calculate_Speed+0x98>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	ee07 3a90 	vmov	s15, r3
 8000e6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e72:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8000edc <Calculate_Speed+0x9c>
 8000e76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e7a:	edc7 7a00 	vstr	s15, [r7]

    // Calculate speed if the time interval is greater than zero
    if (timeInterval > 0.1f)
 8000e7e:	edd7 7a00 	vldr	s15, [r7]
 8000e82:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000ee0 <Calculate_Speed+0xa0>
 8000e86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e8e:	dd10      	ble.n	8000eb2 <Calculate_Speed+0x72>
    {
        speed = (float)abs(distanceChange) / timeInterval;  // Speed in cm/s
 8000e90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	bfb8      	it	lt
 8000e98:	425b      	neglt	r3, r3
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	ee07 3a90 	vmov	s15, r3
 8000ea0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ea4:	ed97 7a00 	vldr	s14, [r7]
 8000ea8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000eac:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee4 <Calculate_Speed+0xa4>)
 8000eae:	edc3 7a00 	vstr	s15, [r3]
    }

    // Store the current distance and time for the next measurement
    previousDistance = RxData[2];
 8000eb2:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <Calculate_Speed+0x8c>)
 8000eb4:	789b      	ldrb	r3, [r3, #2]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	4b05      	ldr	r3, [pc, #20]	@ (8000ed0 <Calculate_Speed+0x90>)
 8000eba:	801a      	strh	r2, [r3, #0]
    previousTime = currentTime;
 8000ebc:	4b05      	ldr	r3, [pc, #20]	@ (8000ed4 <Calculate_Speed+0x94>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a05      	ldr	r2, [pc, #20]	@ (8000ed8 <Calculate_Speed+0x98>)
 8000ec2:	6013      	str	r3, [r2, #0]

}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000190 	.word	0x20000190
 8000ed0:	2000013c 	.word	0x2000013c
 8000ed4:	20000148 	.word	0x20000148
 8000ed8:	20000144 	.word	0x20000144
 8000edc:	447a0000 	.word	0x447a0000
 8000ee0:	3dcccccd 	.word	0x3dcccccd
 8000ee4:	20000140 	.word	0x20000140

08000ee8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b0a6      	sub	sp, #152	@ 0x98
 8000eec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eee:	f000 fbef 	bl	80016d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef2:	f000 f8bd 	bl	8001070 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef6:	f000 f9d1 	bl	800129c <MX_GPIO_Init>
  MX_CAN1_Init();
 8000efa:	f000 f923 	bl	8001144 <MX_CAN1_Init>
  MX_I2C1_Init();
 8000efe:	f000 f975 	bl	80011ec <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000f02:	f000 f9a1 	bl	8001248 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  HAL_CAN_Start(&hcan1);
 8000f06:	484e      	ldr	r0, [pc, #312]	@ (8001040 <main+0x158>)
 8000f08:	f000 fe54 	bl	8001bb4 <HAL_CAN_Start>

  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000f0c:	2110      	movs	r1, #16
 8000f0e:	484c      	ldr	r0, [pc, #304]	@ (8001040 <main+0x158>)
 8000f10:	f001 f886 	bl	8002020 <HAL_CAN_ActivateNotification>

  TxHeader.DLC = 2;
 8000f14:	4b4b      	ldr	r3, [pc, #300]	@ (8001044 <main+0x15c>)
 8000f16:	2202      	movs	r2, #2
 8000f18:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 8000f1a:	4b4a      	ldr	r3, [pc, #296]	@ (8001044 <main+0x15c>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000f20:	4b48      	ldr	r3, [pc, #288]	@ (8001044 <main+0x15c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x103;
 8000f26:	4b47      	ldr	r3, [pc, #284]	@ (8001044 <main+0x15c>)
 8000f28:	f240 1203 	movw	r2, #259	@ 0x103
 8000f2c:	601a      	str	r2, [r3, #0]
  TxHeader.ExtId = 0x00;
 8000f2e:	4b45      	ldr	r3, [pc, #276]	@ (8001044 <main+0x15c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	605a      	str	r2, [r3, #4]
  TxHeader.TransmitGlobalTime = DISABLE;
 8000f34:	4b43      	ldr	r3, [pc, #268]	@ (8001044 <main+0x15c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	751a      	strb	r2, [r3, #20]

  TxData[0] = 50; //ms delay
 8000f3a:	4b43      	ldr	r3, [pc, #268]	@ (8001048 <main+0x160>)
 8000f3c:	2232      	movs	r2, #50	@ 0x32
 8000f3e:	701a      	strb	r2, [r3, #0]
  TxData[1] = 20; //loop rep
 8000f40:	4b41      	ldr	r3, [pc, #260]	@ (8001048 <main+0x160>)
 8000f42:	2214      	movs	r2, #20
 8000f44:	705a      	strb	r2, [r3, #1]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	   if(datacheck){
 8000f46:	4b41      	ldr	r3, [pc, #260]	@ (800104c <main+0x164>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d0fb      	beq.n	8000f46 <main+0x5e>
	  			 if (RxData[0] >=220 )
 8000f4e:	4b40      	ldr	r3, [pc, #256]	@ (8001050 <main+0x168>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2bdb      	cmp	r3, #219	@ 0xdb
 8000f54:	d90f      	bls.n	8000f76 <main+0x8e>
	  			 	  {
	  			 		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15,GPIO_PIN_SET);
 8000f56:	2201      	movs	r2, #1
 8000f58:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f5c:	483d      	ldr	r0, [pc, #244]	@ (8001054 <main+0x16c>)
 8000f5e:	f001 fd63 	bl	8002a28 <HAL_GPIO_WritePin>
	  			 		  HAL_Delay(500);
 8000f62:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f66:	f000 fc25 	bl	80017b4 <HAL_Delay>
	  			 		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15,GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f70:	4838      	ldr	r0, [pc, #224]	@ (8001054 <main+0x16c>)
 8000f72:	f001 fd59 	bl	8002a28 <HAL_GPIO_WritePin>
	  		//MQ3_CHECK_END==================================================



	  		//TEMPERATURE_COUNTING===========================================
	  			float Voltage = ((RxData[1]*5)/4095.0) ;
 8000f76:	4b36      	ldr	r3, [pc, #216]	@ (8001050 <main+0x168>)
 8000f78:	785b      	ldrb	r3, [r3, #1]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	4413      	add	r3, r2
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff face 	bl	8000524 <__aeabi_i2d>
 8000f88:	a32b      	add	r3, pc, #172	@ (adr r3, 8001038 <main+0x150>)
 8000f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8e:	f7ff fc5d 	bl	800084c <__aeabi_ddiv>
 8000f92:	4602      	mov	r2, r0
 8000f94:	460b      	mov	r3, r1
 8000f96:	4610      	mov	r0, r2
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f7ff fd5f 	bl	8000a5c <__aeabi_d2f>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	  			 	 	  	  temperature = Voltage*100.0 ;
 8000fa4:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8000fa8:	f7ff face 	bl	8000548 <__aeabi_f2d>
 8000fac:	f04f 0200 	mov.w	r2, #0
 8000fb0:	4b29      	ldr	r3, [pc, #164]	@ (8001058 <main+0x170>)
 8000fb2:	f7ff fb21 	bl	80005f8 <__aeabi_dmul>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	460b      	mov	r3, r1
 8000fba:	4610      	mov	r0, r2
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f7ff fd2d 	bl	8000a1c <__aeabi_d2uiz>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	4b25      	ldr	r3, [pc, #148]	@ (800105c <main+0x174>)
 8000fc8:	701a      	strb	r2, [r3, #0]
	  		//Temp_end=======================================================



	  		//ULTRASONIC_SPEED==============================================
	  			 	 	 	Calculate_Speed();
 8000fca:	f7ff ff39 	bl	8000e40 <Calculate_Speed>
	  	    //SPEED_END=====================================================
	  		  //}
	  		 //sprintf(str1, "Alcohol=%d\r\n Temperature=%d\r\n Speed=%d", RxData[0], RxData[1],RxData[2]);
	  		sprintf(str, "alcohol=%d\r\n temperature=%d\r\n speed=%d\r\n", RxData[0], temperature,(uint8_t)speed);
 8000fce:	4b20      	ldr	r3, [pc, #128]	@ (8001050 <main+0x168>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	4b21      	ldr	r3, [pc, #132]	@ (800105c <main+0x174>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4b21      	ldr	r3, [pc, #132]	@ (8001060 <main+0x178>)
 8000fdc:	edd3 7a00 	vldr	s15, [r3]
 8000fe0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fe4:	edc7 7a01 	vstr	s15, [r7, #4]
 8000fe8:	793b      	ldrb	r3, [r7, #4]
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	491b      	ldr	r1, [pc, #108]	@ (8001064 <main+0x17c>)
 8000ff6:	f002 ff19 	bl	8003e2c <siprintf>
	  		 HAL_UART_Transmit(&huart2,(uint8_t*)str, strlen(str),HAL_MAX_DELAY );
 8000ffa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff f8e6 	bl	80001d0 <strlen>
 8001004:	4603      	mov	r3, r0
 8001006:	b29a      	uxth	r2, r3
 8001008:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800100c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001010:	4815      	ldr	r0, [pc, #84]	@ (8001068 <main+0x180>)
 8001012:	f002 fb4f 	bl	80036b4 <HAL_UART_Transmit>
	  		 HAL_Delay(1000);
 8001016:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800101a:	f000 fbcb 	bl	80017b4 <HAL_Delay>

	  		 datacheck = 0;
 800101e:	4b0b      	ldr	r3, [pc, #44]	@ (800104c <main+0x164>)
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
	  		 HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8001024:	4b11      	ldr	r3, [pc, #68]	@ (800106c <main+0x184>)
 8001026:	4a08      	ldr	r2, [pc, #32]	@ (8001048 <main+0x160>)
 8001028:	4906      	ldr	r1, [pc, #24]	@ (8001044 <main+0x15c>)
 800102a:	4805      	ldr	r0, [pc, #20]	@ (8001040 <main+0x158>)
 800102c:	f000 fe06 	bl	8001c3c <HAL_CAN_AddTxMessage>
	   if(datacheck){
 8001030:	e789      	b.n	8000f46 <main+0x5e>
 8001032:	bf00      	nop
 8001034:	f3af 8000 	nop.w
 8001038:	00000000 	.word	0x00000000
 800103c:	40affe00 	.word	0x40affe00
 8001040:	20000078 	.word	0x20000078
 8001044:	20000154 	.word	0x20000154
 8001048:	20000188 	.word	0x20000188
 800104c:	20000150 	.word	0x20000150
 8001050:	20000190 	.word	0x20000190
 8001054:	40020c00 	.word	0x40020c00
 8001058:	40590000 	.word	0x40590000
 800105c:	2000014c 	.word	0x2000014c
 8001060:	20000140 	.word	0x20000140
 8001064:	08004784 	.word	0x08004784
 8001068:	200000f4 	.word	0x200000f4
 800106c:	20000198 	.word	0x20000198

08001070 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b094      	sub	sp, #80	@ 0x50
 8001074:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001076:	f107 0320 	add.w	r3, r7, #32
 800107a:	2230      	movs	r2, #48	@ 0x30
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f002 fef4 	bl	8003e6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001084:	f107 030c 	add.w	r3, r7, #12
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001094:	2300      	movs	r3, #0
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	4b28      	ldr	r3, [pc, #160]	@ (800113c <SystemClock_Config+0xcc>)
 800109a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109c:	4a27      	ldr	r2, [pc, #156]	@ (800113c <SystemClock_Config+0xcc>)
 800109e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80010a4:	4b25      	ldr	r3, [pc, #148]	@ (800113c <SystemClock_Config+0xcc>)
 80010a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010b0:	2300      	movs	r3, #0
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	4b22      	ldr	r3, [pc, #136]	@ (8001140 <SystemClock_Config+0xd0>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a21      	ldr	r2, [pc, #132]	@ (8001140 <SystemClock_Config+0xd0>)
 80010ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010be:	6013      	str	r3, [r2, #0]
 80010c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001140 <SystemClock_Config+0xd0>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010cc:	2301      	movs	r3, #1
 80010ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010d4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d6:	2302      	movs	r3, #2
 80010d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010e0:	2304      	movs	r3, #4
 80010e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010e4:	23a8      	movs	r3, #168	@ 0xa8
 80010e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010e8:	2302      	movs	r3, #2
 80010ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010ec:	2307      	movs	r3, #7
 80010ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f0:	f107 0320 	add.w	r3, r7, #32
 80010f4:	4618      	mov	r0, r3
 80010f6:	f001 fdf5 	bl	8002ce4 <HAL_RCC_OscConfig>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001100:	f000 f92c 	bl	800135c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001104:	230f      	movs	r3, #15
 8001106:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001108:	2302      	movs	r3, #2
 800110a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001110:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001114:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001116:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800111a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	2105      	movs	r1, #5
 8001122:	4618      	mov	r0, r3
 8001124:	f002 f856 	bl	80031d4 <HAL_RCC_ClockConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800112e:	f000 f915 	bl	800135c <Error_Handler>
  }
}
 8001132:	bf00      	nop
 8001134:	3750      	adds	r7, #80	@ 0x50
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40023800 	.word	0x40023800
 8001140:	40007000 	.word	0x40007000

08001144 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	@ 0x28
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800114a:	4b26      	ldr	r3, [pc, #152]	@ (80011e4 <MX_CAN1_Init+0xa0>)
 800114c:	4a26      	ldr	r2, [pc, #152]	@ (80011e8 <MX_CAN1_Init+0xa4>)
 800114e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 8001150:	4b24      	ldr	r3, [pc, #144]	@ (80011e4 <MX_CAN1_Init+0xa0>)
 8001152:	2215      	movs	r2, #21
 8001154:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001156:	4b23      	ldr	r3, [pc, #140]	@ (80011e4 <MX_CAN1_Init+0xa0>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800115c:	4b21      	ldr	r3, [pc, #132]	@ (80011e4 <MX_CAN1_Init+0xa0>)
 800115e:	2200      	movs	r2, #0
 8001160:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001162:	4b20      	ldr	r3, [pc, #128]	@ (80011e4 <MX_CAN1_Init+0xa0>)
 8001164:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001168:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800116a:	4b1e      	ldr	r3, [pc, #120]	@ (80011e4 <MX_CAN1_Init+0xa0>)
 800116c:	2200      	movs	r2, #0
 800116e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001170:	4b1c      	ldr	r3, [pc, #112]	@ (80011e4 <MX_CAN1_Init+0xa0>)
 8001172:	2200      	movs	r2, #0
 8001174:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001176:	4b1b      	ldr	r3, [pc, #108]	@ (80011e4 <MX_CAN1_Init+0xa0>)
 8001178:	2200      	movs	r2, #0
 800117a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800117c:	4b19      	ldr	r3, [pc, #100]	@ (80011e4 <MX_CAN1_Init+0xa0>)
 800117e:	2200      	movs	r2, #0
 8001180:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001182:	4b18      	ldr	r3, [pc, #96]	@ (80011e4 <MX_CAN1_Init+0xa0>)
 8001184:	2200      	movs	r2, #0
 8001186:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001188:	4b16      	ldr	r3, [pc, #88]	@ (80011e4 <MX_CAN1_Init+0xa0>)
 800118a:	2200      	movs	r2, #0
 800118c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800118e:	4b15      	ldr	r3, [pc, #84]	@ (80011e4 <MX_CAN1_Init+0xa0>)
 8001190:	2200      	movs	r2, #0
 8001192:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001194:	4813      	ldr	r0, [pc, #76]	@ (80011e4 <MX_CAN1_Init+0xa0>)
 8001196:	f000 fb31 	bl	80017fc <HAL_CAN_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80011a0:	f000 f8dc 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80011a4:	2301      	movs	r3, #1
 80011a6:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 2;
 80011a8:	2302      	movs	r3, #2
 80011aa:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 80011ac:	2301      	movs	r3, #1
 80011ae:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x446<<5;
 80011b0:	f648 03c0 	movw	r3, #35008	@ 0x88c0
 80011b4:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 80011b6:	2300      	movs	r3, #0
 80011b8:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterMaskIdHigh = 0x446<<5;
 80011be:	f648 03c0 	movw	r3, #35008	@ 0x88c0
 80011c2:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 80011c4:	2300      	movs	r3, #0
 80011c6:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80011c8:	2301      	movs	r3, #1
 80011ca:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 14;
 80011cc:	230e      	movs	r3, #14
 80011ce:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 80011d0:	463b      	mov	r3, r7
 80011d2:	4619      	mov	r1, r3
 80011d4:	4803      	ldr	r0, [pc, #12]	@ (80011e4 <MX_CAN1_Init+0xa0>)
 80011d6:	f000 fc0d 	bl	80019f4 <HAL_CAN_ConfigFilter>


  /* USER CODE END CAN1_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	3728      	adds	r7, #40	@ 0x28
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000078 	.word	0x20000078
 80011e8:	40006400 	.word	0x40006400

080011ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011f0:	4b12      	ldr	r3, [pc, #72]	@ (800123c <MX_I2C1_Init+0x50>)
 80011f2:	4a13      	ldr	r2, [pc, #76]	@ (8001240 <MX_I2C1_Init+0x54>)
 80011f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011f6:	4b11      	ldr	r3, [pc, #68]	@ (800123c <MX_I2C1_Init+0x50>)
 80011f8:	4a12      	ldr	r2, [pc, #72]	@ (8001244 <MX_I2C1_Init+0x58>)
 80011fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011fc:	4b0f      	ldr	r3, [pc, #60]	@ (800123c <MX_I2C1_Init+0x50>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001202:	4b0e      	ldr	r3, [pc, #56]	@ (800123c <MX_I2C1_Init+0x50>)
 8001204:	2200      	movs	r2, #0
 8001206:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001208:	4b0c      	ldr	r3, [pc, #48]	@ (800123c <MX_I2C1_Init+0x50>)
 800120a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800120e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001210:	4b0a      	ldr	r3, [pc, #40]	@ (800123c <MX_I2C1_Init+0x50>)
 8001212:	2200      	movs	r2, #0
 8001214:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001216:	4b09      	ldr	r3, [pc, #36]	@ (800123c <MX_I2C1_Init+0x50>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800121c:	4b07      	ldr	r3, [pc, #28]	@ (800123c <MX_I2C1_Init+0x50>)
 800121e:	2200      	movs	r2, #0
 8001220:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001222:	4b06      	ldr	r3, [pc, #24]	@ (800123c <MX_I2C1_Init+0x50>)
 8001224:	2200      	movs	r2, #0
 8001226:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001228:	4804      	ldr	r0, [pc, #16]	@ (800123c <MX_I2C1_Init+0x50>)
 800122a:	f001 fc17 	bl	8002a5c <HAL_I2C_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001234:	f000 f892 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	200000a0 	.word	0x200000a0
 8001240:	40005400 	.word	0x40005400
 8001244:	000186a0 	.word	0x000186a0

08001248 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800124c:	4b11      	ldr	r3, [pc, #68]	@ (8001294 <MX_USART2_UART_Init+0x4c>)
 800124e:	4a12      	ldr	r2, [pc, #72]	@ (8001298 <MX_USART2_UART_Init+0x50>)
 8001250:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001252:	4b10      	ldr	r3, [pc, #64]	@ (8001294 <MX_USART2_UART_Init+0x4c>)
 8001254:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001258:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800125a:	4b0e      	ldr	r3, [pc, #56]	@ (8001294 <MX_USART2_UART_Init+0x4c>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001260:	4b0c      	ldr	r3, [pc, #48]	@ (8001294 <MX_USART2_UART_Init+0x4c>)
 8001262:	2200      	movs	r2, #0
 8001264:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001266:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <MX_USART2_UART_Init+0x4c>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800126c:	4b09      	ldr	r3, [pc, #36]	@ (8001294 <MX_USART2_UART_Init+0x4c>)
 800126e:	220c      	movs	r2, #12
 8001270:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001272:	4b08      	ldr	r3, [pc, #32]	@ (8001294 <MX_USART2_UART_Init+0x4c>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001278:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <MX_USART2_UART_Init+0x4c>)
 800127a:	2200      	movs	r2, #0
 800127c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800127e:	4805      	ldr	r0, [pc, #20]	@ (8001294 <MX_USART2_UART_Init+0x4c>)
 8001280:	f002 f9c8 	bl	8003614 <HAL_UART_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800128a:	f000 f867 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200000f4 	.word	0x200000f4
 8001298:	40004400 	.word	0x40004400

0800129c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	@ 0x28
 80012a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a2:	f107 0314 	add.w	r3, r7, #20
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]
 80012b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
 80012b6:	4b27      	ldr	r3, [pc, #156]	@ (8001354 <MX_GPIO_Init+0xb8>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	4a26      	ldr	r2, [pc, #152]	@ (8001354 <MX_GPIO_Init+0xb8>)
 80012bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c2:	4b24      	ldr	r3, [pc, #144]	@ (8001354 <MX_GPIO_Init+0xb8>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012ca:	613b      	str	r3, [r7, #16]
 80012cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	4b20      	ldr	r3, [pc, #128]	@ (8001354 <MX_GPIO_Init+0xb8>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	4a1f      	ldr	r2, [pc, #124]	@ (8001354 <MX_GPIO_Init+0xb8>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012de:	4b1d      	ldr	r3, [pc, #116]	@ (8001354 <MX_GPIO_Init+0xb8>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	4b19      	ldr	r3, [pc, #100]	@ (8001354 <MX_GPIO_Init+0xb8>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f2:	4a18      	ldr	r2, [pc, #96]	@ (8001354 <MX_GPIO_Init+0xb8>)
 80012f4:	f043 0308 	orr.w	r3, r3, #8
 80012f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012fa:	4b16      	ldr	r3, [pc, #88]	@ (8001354 <MX_GPIO_Init+0xb8>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fe:	f003 0308 	and.w	r3, r3, #8
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	4b12      	ldr	r3, [pc, #72]	@ (8001354 <MX_GPIO_Init+0xb8>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	4a11      	ldr	r2, [pc, #68]	@ (8001354 <MX_GPIO_Init+0xb8>)
 8001310:	f043 0302 	orr.w	r3, r3, #2
 8001314:	6313      	str	r3, [r2, #48]	@ 0x30
 8001316:	4b0f      	ldr	r3, [pc, #60]	@ (8001354 <MX_GPIO_Init+0xb8>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001322:	2200      	movs	r2, #0
 8001324:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001328:	480b      	ldr	r0, [pc, #44]	@ (8001358 <MX_GPIO_Init+0xbc>)
 800132a:	f001 fb7d 	bl	8002a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800132e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001332:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001334:	2301      	movs	r3, #1
 8001336:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133c:	2300      	movs	r3, #0
 800133e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	4619      	mov	r1, r3
 8001346:	4804      	ldr	r0, [pc, #16]	@ (8001358 <MX_GPIO_Init+0xbc>)
 8001348:	f001 f9d2 	bl	80026f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800134c:	bf00      	nop
 800134e:	3728      	adds	r7, #40	@ 0x28
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40023800 	.word	0x40023800
 8001358:	40020c00 	.word	0x40020c00

0800135c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001360:	b672      	cpsid	i
}
 8001362:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001364:	bf00      	nop
 8001366:	e7fd      	b.n	8001364 <Error_Handler+0x8>

08001368 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	607b      	str	r3, [r7, #4]
 8001372:	4b10      	ldr	r3, [pc, #64]	@ (80013b4 <HAL_MspInit+0x4c>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001376:	4a0f      	ldr	r2, [pc, #60]	@ (80013b4 <HAL_MspInit+0x4c>)
 8001378:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800137c:	6453      	str	r3, [r2, #68]	@ 0x44
 800137e:	4b0d      	ldr	r3, [pc, #52]	@ (80013b4 <HAL_MspInit+0x4c>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001382:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001386:	607b      	str	r3, [r7, #4]
 8001388:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	603b      	str	r3, [r7, #0]
 800138e:	4b09      	ldr	r3, [pc, #36]	@ (80013b4 <HAL_MspInit+0x4c>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001392:	4a08      	ldr	r2, [pc, #32]	@ (80013b4 <HAL_MspInit+0x4c>)
 8001394:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001398:	6413      	str	r3, [r2, #64]	@ 0x40
 800139a:	4b06      	ldr	r3, [pc, #24]	@ (80013b4 <HAL_MspInit+0x4c>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013a2:	603b      	str	r3, [r7, #0]
 80013a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013a6:	2007      	movs	r0, #7
 80013a8:	f001 f960 	bl	800266c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ac:	bf00      	nop
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40023800 	.word	0x40023800

080013b8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08a      	sub	sp, #40	@ 0x28
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a1d      	ldr	r2, [pc, #116]	@ (800144c <HAL_CAN_MspInit+0x94>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d134      	bne.n	8001444 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	4b1c      	ldr	r3, [pc, #112]	@ (8001450 <HAL_CAN_MspInit+0x98>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e2:	4a1b      	ldr	r2, [pc, #108]	@ (8001450 <HAL_CAN_MspInit+0x98>)
 80013e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ea:	4b19      	ldr	r3, [pc, #100]	@ (8001450 <HAL_CAN_MspInit+0x98>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	4b15      	ldr	r3, [pc, #84]	@ (8001450 <HAL_CAN_MspInit+0x98>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fe:	4a14      	ldr	r2, [pc, #80]	@ (8001450 <HAL_CAN_MspInit+0x98>)
 8001400:	f043 0302 	orr.w	r3, r3, #2
 8001404:	6313      	str	r3, [r2, #48]	@ 0x30
 8001406:	4b12      	ldr	r3, [pc, #72]	@ (8001450 <HAL_CAN_MspInit+0x98>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001412:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001416:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	2302      	movs	r3, #2
 800141a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001420:	2303      	movs	r3, #3
 8001422:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001424:	2309      	movs	r3, #9
 8001426:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	4619      	mov	r1, r3
 800142e:	4809      	ldr	r0, [pc, #36]	@ (8001454 <HAL_CAN_MspInit+0x9c>)
 8001430:	f001 f95e 	bl	80026f0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001434:	2200      	movs	r2, #0
 8001436:	2100      	movs	r1, #0
 8001438:	2015      	movs	r0, #21
 800143a:	f001 f922 	bl	8002682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800143e:	2015      	movs	r0, #21
 8001440:	f001 f93b 	bl	80026ba <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001444:	bf00      	nop
 8001446:	3728      	adds	r7, #40	@ 0x28
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40006400 	.word	0x40006400
 8001450:	40023800 	.word	0x40023800
 8001454:	40020400 	.word	0x40020400

08001458 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08a      	sub	sp, #40	@ 0x28
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a19      	ldr	r2, [pc, #100]	@ (80014dc <HAL_I2C_MspInit+0x84>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d12b      	bne.n	80014d2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	4b18      	ldr	r3, [pc, #96]	@ (80014e0 <HAL_I2C_MspInit+0x88>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001482:	4a17      	ldr	r2, [pc, #92]	@ (80014e0 <HAL_I2C_MspInit+0x88>)
 8001484:	f043 0302 	orr.w	r3, r3, #2
 8001488:	6313      	str	r3, [r2, #48]	@ 0x30
 800148a:	4b15      	ldr	r3, [pc, #84]	@ (80014e0 <HAL_I2C_MspInit+0x88>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001496:	23c0      	movs	r3, #192	@ 0xc0
 8001498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800149a:	2312      	movs	r3, #18
 800149c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a2:	2303      	movs	r3, #3
 80014a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014a6:	2304      	movs	r3, #4
 80014a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014aa:	f107 0314 	add.w	r3, r7, #20
 80014ae:	4619      	mov	r1, r3
 80014b0:	480c      	ldr	r0, [pc, #48]	@ (80014e4 <HAL_I2C_MspInit+0x8c>)
 80014b2:	f001 f91d 	bl	80026f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	4b09      	ldr	r3, [pc, #36]	@ (80014e0 <HAL_I2C_MspInit+0x88>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014be:	4a08      	ldr	r2, [pc, #32]	@ (80014e0 <HAL_I2C_MspInit+0x88>)
 80014c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014c6:	4b06      	ldr	r3, [pc, #24]	@ (80014e0 <HAL_I2C_MspInit+0x88>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80014d2:	bf00      	nop
 80014d4:	3728      	adds	r7, #40	@ 0x28
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40005400 	.word	0x40005400
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40020400 	.word	0x40020400

080014e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	@ 0x28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a19      	ldr	r2, [pc, #100]	@ (800156c <HAL_UART_MspInit+0x84>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d12b      	bne.n	8001562 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	613b      	str	r3, [r7, #16]
 800150e:	4b18      	ldr	r3, [pc, #96]	@ (8001570 <HAL_UART_MspInit+0x88>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001512:	4a17      	ldr	r2, [pc, #92]	@ (8001570 <HAL_UART_MspInit+0x88>)
 8001514:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001518:	6413      	str	r3, [r2, #64]	@ 0x40
 800151a:	4b15      	ldr	r3, [pc, #84]	@ (8001570 <HAL_UART_MspInit+0x88>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	4b11      	ldr	r3, [pc, #68]	@ (8001570 <HAL_UART_MspInit+0x88>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	4a10      	ldr	r2, [pc, #64]	@ (8001570 <HAL_UART_MspInit+0x88>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	6313      	str	r3, [r2, #48]	@ 0x30
 8001536:	4b0e      	ldr	r3, [pc, #56]	@ (8001570 <HAL_UART_MspInit+0x88>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001542:	230c      	movs	r3, #12
 8001544:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	2302      	movs	r3, #2
 8001548:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154e:	2303      	movs	r3, #3
 8001550:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001552:	2307      	movs	r3, #7
 8001554:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	4619      	mov	r1, r3
 800155c:	4805      	ldr	r0, [pc, #20]	@ (8001574 <HAL_UART_MspInit+0x8c>)
 800155e:	f001 f8c7 	bl	80026f0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001562:	bf00      	nop
 8001564:	3728      	adds	r7, #40	@ 0x28
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40004400 	.word	0x40004400
 8001570:	40023800 	.word	0x40023800
 8001574:	40020000 	.word	0x40020000

08001578 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800157c:	bf00      	nop
 800157e:	e7fd      	b.n	800157c <NMI_Handler+0x4>

08001580 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001584:	bf00      	nop
 8001586:	e7fd      	b.n	8001584 <HardFault_Handler+0x4>

08001588 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800158c:	bf00      	nop
 800158e:	e7fd      	b.n	800158c <MemManage_Handler+0x4>

08001590 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001594:	bf00      	nop
 8001596:	e7fd      	b.n	8001594 <BusFault_Handler+0x4>

08001598 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800159c:	bf00      	nop
 800159e:	e7fd      	b.n	800159c <UsageFault_Handler+0x4>

080015a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ce:	f000 f8d1 	bl	8001774 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
	...

080015d8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80015dc:	4802      	ldr	r0, [pc, #8]	@ (80015e8 <CAN1_RX1_IRQHandler+0x10>)
 80015de:	f000 fd45 	bl	800206c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000078 	.word	0x20000078

080015ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015f4:	4a14      	ldr	r2, [pc, #80]	@ (8001648 <_sbrk+0x5c>)
 80015f6:	4b15      	ldr	r3, [pc, #84]	@ (800164c <_sbrk+0x60>)
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001600:	4b13      	ldr	r3, [pc, #76]	@ (8001650 <_sbrk+0x64>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d102      	bne.n	800160e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001608:	4b11      	ldr	r3, [pc, #68]	@ (8001650 <_sbrk+0x64>)
 800160a:	4a12      	ldr	r2, [pc, #72]	@ (8001654 <_sbrk+0x68>)
 800160c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800160e:	4b10      	ldr	r3, [pc, #64]	@ (8001650 <_sbrk+0x64>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4413      	add	r3, r2
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	429a      	cmp	r2, r3
 800161a:	d207      	bcs.n	800162c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800161c:	f002 fc2e 	bl	8003e7c <__errno>
 8001620:	4603      	mov	r3, r0
 8001622:	220c      	movs	r2, #12
 8001624:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001626:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800162a:	e009      	b.n	8001640 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800162c:	4b08      	ldr	r3, [pc, #32]	@ (8001650 <_sbrk+0x64>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001632:	4b07      	ldr	r3, [pc, #28]	@ (8001650 <_sbrk+0x64>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4413      	add	r3, r2
 800163a:	4a05      	ldr	r2, [pc, #20]	@ (8001650 <_sbrk+0x64>)
 800163c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800163e:	68fb      	ldr	r3, [r7, #12]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3718      	adds	r7, #24
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20020000 	.word	0x20020000
 800164c:	00000400 	.word	0x00000400
 8001650:	2000019c 	.word	0x2000019c
 8001654:	200002f0 	.word	0x200002f0

08001658 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800165c:	4b06      	ldr	r3, [pc, #24]	@ (8001678 <SystemInit+0x20>)
 800165e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001662:	4a05      	ldr	r2, [pc, #20]	@ (8001678 <SystemInit+0x20>)
 8001664:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001668:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800167c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001680:	f7ff ffea 	bl	8001658 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001684:	480c      	ldr	r0, [pc, #48]	@ (80016b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001686:	490d      	ldr	r1, [pc, #52]	@ (80016bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001688:	4a0d      	ldr	r2, [pc, #52]	@ (80016c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800168a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800168c:	e002      	b.n	8001694 <LoopCopyDataInit>

0800168e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800168e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001692:	3304      	adds	r3, #4

08001694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001698:	d3f9      	bcc.n	800168e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800169a:	4a0a      	ldr	r2, [pc, #40]	@ (80016c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800169c:	4c0a      	ldr	r4, [pc, #40]	@ (80016c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800169e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a0:	e001      	b.n	80016a6 <LoopFillZerobss>

080016a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016a4:	3204      	adds	r2, #4

080016a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016a8:	d3fb      	bcc.n	80016a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016aa:	f002 fbed 	bl	8003e88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ae:	f7ff fc1b 	bl	8000ee8 <main>
  bx  lr    
 80016b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80016b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016bc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80016c0:	0800480c 	.word	0x0800480c
  ldr r2, =_sbss
 80016c4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80016c8:	200002ec 	.word	0x200002ec

080016cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016cc:	e7fe      	b.n	80016cc <ADC_IRQHandler>
	...

080016d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001710 <HAL_Init+0x40>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001710 <HAL_Init+0x40>)
 80016da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001710 <HAL_Init+0x40>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001710 <HAL_Init+0x40>)
 80016e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016ec:	4b08      	ldr	r3, [pc, #32]	@ (8001710 <HAL_Init+0x40>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a07      	ldr	r2, [pc, #28]	@ (8001710 <HAL_Init+0x40>)
 80016f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016f8:	2003      	movs	r0, #3
 80016fa:	f000 ffb7 	bl	800266c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016fe:	2000      	movs	r0, #0
 8001700:	f000 f808 	bl	8001714 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001704:	f7ff fe30 	bl	8001368 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40023c00 	.word	0x40023c00

08001714 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800171c:	4b12      	ldr	r3, [pc, #72]	@ (8001768 <HAL_InitTick+0x54>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	4b12      	ldr	r3, [pc, #72]	@ (800176c <HAL_InitTick+0x58>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	4619      	mov	r1, r3
 8001726:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800172a:	fbb3 f3f1 	udiv	r3, r3, r1
 800172e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001732:	4618      	mov	r0, r3
 8001734:	f000 ffcf 	bl	80026d6 <HAL_SYSTICK_Config>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e00e      	b.n	8001760 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2b0f      	cmp	r3, #15
 8001746:	d80a      	bhi.n	800175e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001748:	2200      	movs	r2, #0
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001750:	f000 ff97 	bl	8002682 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001754:	4a06      	ldr	r2, [pc, #24]	@ (8001770 <HAL_InitTick+0x5c>)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800175a:	2300      	movs	r3, #0
 800175c:	e000      	b.n	8001760 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
}
 8001760:	4618      	mov	r0, r3
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20000000 	.word	0x20000000
 800176c:	20000008 	.word	0x20000008
 8001770:	20000004 	.word	0x20000004

08001774 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001778:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <HAL_IncTick+0x20>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	461a      	mov	r2, r3
 800177e:	4b06      	ldr	r3, [pc, #24]	@ (8001798 <HAL_IncTick+0x24>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4413      	add	r3, r2
 8001784:	4a04      	ldr	r2, [pc, #16]	@ (8001798 <HAL_IncTick+0x24>)
 8001786:	6013      	str	r3, [r2, #0]
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	20000008 	.word	0x20000008
 8001798:	200001a0 	.word	0x200001a0

0800179c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  return uwTick;
 80017a0:	4b03      	ldr	r3, [pc, #12]	@ (80017b0 <HAL_GetTick+0x14>)
 80017a2:	681b      	ldr	r3, [r3, #0]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	200001a0 	.word	0x200001a0

080017b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017bc:	f7ff ffee 	bl	800179c <HAL_GetTick>
 80017c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80017cc:	d005      	beq.n	80017da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ce:	4b0a      	ldr	r3, [pc, #40]	@ (80017f8 <HAL_Delay+0x44>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	461a      	mov	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	4413      	add	r3, r2
 80017d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017da:	bf00      	nop
 80017dc:	f7ff ffde 	bl	800179c <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d8f7      	bhi.n	80017dc <HAL_Delay+0x28>
  {
  }
}
 80017ec:	bf00      	nop
 80017ee:	bf00      	nop
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000008 	.word	0x20000008

080017fc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e0ed      	b.n	80019ea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d102      	bne.n	8001820 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7ff fdcc 	bl	80013b8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f042 0201 	orr.w	r2, r2, #1
 800182e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001830:	f7ff ffb4 	bl	800179c <HAL_GetTick>
 8001834:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001836:	e012      	b.n	800185e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001838:	f7ff ffb0 	bl	800179c <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b0a      	cmp	r3, #10
 8001844:	d90b      	bls.n	800185e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800184a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2205      	movs	r2, #5
 8001856:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e0c5      	b.n	80019ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0e5      	beq.n	8001838 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 0202 	bic.w	r2, r2, #2
 800187a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800187c:	f7ff ff8e 	bl	800179c <HAL_GetTick>
 8001880:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001882:	e012      	b.n	80018aa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001884:	f7ff ff8a 	bl	800179c <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b0a      	cmp	r3, #10
 8001890:	d90b      	bls.n	80018aa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001896:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2205      	movs	r2, #5
 80018a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e09f      	b.n	80019ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d1e5      	bne.n	8001884 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	7e1b      	ldrb	r3, [r3, #24]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d108      	bne.n	80018d2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	e007      	b.n	80018e2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80018e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	7e5b      	ldrb	r3, [r3, #25]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d108      	bne.n	80018fc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	e007      	b.n	800190c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800190a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	7e9b      	ldrb	r3, [r3, #26]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d108      	bne.n	8001926 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f042 0220 	orr.w	r2, r2, #32
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	e007      	b.n	8001936 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f022 0220 	bic.w	r2, r2, #32
 8001934:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	7edb      	ldrb	r3, [r3, #27]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d108      	bne.n	8001950 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f022 0210 	bic.w	r2, r2, #16
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	e007      	b.n	8001960 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f042 0210 	orr.w	r2, r2, #16
 800195e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	7f1b      	ldrb	r3, [r3, #28]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d108      	bne.n	800197a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f042 0208 	orr.w	r2, r2, #8
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	e007      	b.n	800198a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f022 0208 	bic.w	r2, r2, #8
 8001988:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	7f5b      	ldrb	r3, [r3, #29]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d108      	bne.n	80019a4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f042 0204 	orr.w	r2, r2, #4
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	e007      	b.n	80019b4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f022 0204 	bic.w	r2, r2, #4
 80019b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	431a      	orrs	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	431a      	orrs	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	ea42 0103 	orr.w	r1, r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	1e5a      	subs	r2, r3, #1
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	430a      	orrs	r2, r1
 80019d8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
	...

080019f4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b087      	sub	sp, #28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a0a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001a0c:	7cfb      	ldrb	r3, [r7, #19]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d003      	beq.n	8001a1a <HAL_CAN_ConfigFilter+0x26>
 8001a12:	7cfb      	ldrb	r3, [r7, #19]
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	f040 80be 	bne.w	8001b96 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001a1a:	4b65      	ldr	r3, [pc, #404]	@ (8001bb0 <HAL_CAN_ConfigFilter+0x1bc>)
 8001a1c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001a24:	f043 0201 	orr.w	r2, r3, #1
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001a34:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a48:	021b      	lsls	r3, r3, #8
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	f003 031f 	and.w	r3, r3, #31
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	401a      	ands	r2, r3
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	69db      	ldr	r3, [r3, #28]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d123      	bne.n	8001ac4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	43db      	mvns	r3, r3
 8001a86:	401a      	ands	r2, r3
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a9e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	3248      	adds	r2, #72	@ 0x48
 8001aa4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ab8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001aba:	6979      	ldr	r1, [r7, #20]
 8001abc:	3348      	adds	r3, #72	@ 0x48
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	440b      	add	r3, r1
 8001ac2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	69db      	ldr	r3, [r3, #28]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d122      	bne.n	8001b12 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	431a      	orrs	r2, r3
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001aec:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	3248      	adds	r2, #72	@ 0x48
 8001af2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b06:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b08:	6979      	ldr	r1, [r7, #20]
 8001b0a:	3348      	adds	r3, #72	@ 0x48
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	440b      	add	r3, r1
 8001b10:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d109      	bne.n	8001b2e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	43db      	mvns	r3, r3
 8001b24:	401a      	ands	r2, r3
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001b2c:	e007      	b.n	8001b3e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	431a      	orrs	r2, r3
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d109      	bne.n	8001b5a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	401a      	ands	r2, r3
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001b58:	e007      	b.n	8001b6a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	431a      	orrs	r2, r3
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	6a1b      	ldr	r3, [r3, #32]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d107      	bne.n	8001b82 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001b88:	f023 0201 	bic.w	r2, r3, #1
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001b92:	2300      	movs	r3, #0
 8001b94:	e006      	b.n	8001ba4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b9a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
  }
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	371c      	adds	r7, #28
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	40006400 	.word	0x40006400

08001bb4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d12e      	bne.n	8001c26 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2202      	movs	r2, #2
 8001bcc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f022 0201 	bic.w	r2, r2, #1
 8001bde:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001be0:	f7ff fddc 	bl	800179c <HAL_GetTick>
 8001be4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001be6:	e012      	b.n	8001c0e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001be8:	f7ff fdd8 	bl	800179c <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b0a      	cmp	r3, #10
 8001bf4:	d90b      	bls.n	8001c0e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bfa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2205      	movs	r2, #5
 8001c06:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e012      	b.n	8001c34 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1e5      	bne.n	8001be8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001c22:	2300      	movs	r3, #0
 8001c24:	e006      	b.n	8001c34 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
  }
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b089      	sub	sp, #36	@ 0x24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
 8001c48:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c50:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c5a:	7ffb      	ldrb	r3, [r7, #31]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d003      	beq.n	8001c68 <HAL_CAN_AddTxMessage+0x2c>
 8001c60:	7ffb      	ldrb	r3, [r7, #31]
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	f040 80ad 	bne.w	8001dc2 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d10a      	bne.n	8001c88 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d105      	bne.n	8001c88 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 8095 	beq.w	8001db2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	0e1b      	lsrs	r3, r3, #24
 8001c8c:	f003 0303 	and.w	r3, r3, #3
 8001c90:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001c92:	2201      	movs	r2, #1
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	409a      	lsls	r2, r3
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d10d      	bne.n	8001cc0 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001cae:	68f9      	ldr	r1, [r7, #12]
 8001cb0:	6809      	ldr	r1, [r1, #0]
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	3318      	adds	r3, #24
 8001cb8:	011b      	lsls	r3, r3, #4
 8001cba:	440b      	add	r3, r1
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	e00f      	b.n	8001ce0 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001cca:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001cd0:	68f9      	ldr	r1, [r7, #12]
 8001cd2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001cd4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	3318      	adds	r3, #24
 8001cda:	011b      	lsls	r3, r3, #4
 8001cdc:	440b      	add	r3, r1
 8001cde:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6819      	ldr	r1, [r3, #0]
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	691a      	ldr	r2, [r3, #16]
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	3318      	adds	r3, #24
 8001cec:	011b      	lsls	r3, r3, #4
 8001cee:	440b      	add	r3, r1
 8001cf0:	3304      	adds	r3, #4
 8001cf2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	7d1b      	ldrb	r3, [r3, #20]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d111      	bne.n	8001d20 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	3318      	adds	r3, #24
 8001d04:	011b      	lsls	r3, r3, #4
 8001d06:	4413      	add	r3, r2
 8001d08:	3304      	adds	r3, #4
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	6811      	ldr	r1, [r2, #0]
 8001d10:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	3318      	adds	r3, #24
 8001d18:	011b      	lsls	r3, r3, #4
 8001d1a:	440b      	add	r3, r1
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3307      	adds	r3, #7
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	061a      	lsls	r2, r3, #24
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3306      	adds	r3, #6
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	041b      	lsls	r3, r3, #16
 8001d30:	431a      	orrs	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	3305      	adds	r3, #5
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	021b      	lsls	r3, r3, #8
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	3204      	adds	r2, #4
 8001d40:	7812      	ldrb	r2, [r2, #0]
 8001d42:	4610      	mov	r0, r2
 8001d44:	68fa      	ldr	r2, [r7, #12]
 8001d46:	6811      	ldr	r1, [r2, #0]
 8001d48:	ea43 0200 	orr.w	r2, r3, r0
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	011b      	lsls	r3, r3, #4
 8001d50:	440b      	add	r3, r1
 8001d52:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001d56:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3303      	adds	r3, #3
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	061a      	lsls	r2, r3, #24
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3302      	adds	r3, #2
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	041b      	lsls	r3, r3, #16
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	021b      	lsls	r3, r3, #8
 8001d72:	4313      	orrs	r3, r2
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	7812      	ldrb	r2, [r2, #0]
 8001d78:	4610      	mov	r0, r2
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	6811      	ldr	r1, [r2, #0]
 8001d7e:	ea43 0200 	orr.w	r2, r3, r0
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	011b      	lsls	r3, r3, #4
 8001d86:	440b      	add	r3, r1
 8001d88:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001d8c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	3318      	adds	r3, #24
 8001d96:	011b      	lsls	r3, r3, #4
 8001d98:	4413      	add	r3, r2
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68fa      	ldr	r2, [r7, #12]
 8001d9e:	6811      	ldr	r1, [r2, #0]
 8001da0:	f043 0201 	orr.w	r2, r3, #1
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	3318      	adds	r3, #24
 8001da8:	011b      	lsls	r3, r3, #4
 8001daa:	440b      	add	r3, r1
 8001dac:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001dae:	2300      	movs	r3, #0
 8001db0:	e00e      	b.n	8001dd0 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e006      	b.n	8001dd0 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
  }
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3724      	adds	r7, #36	@ 0x24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b087      	sub	sp, #28
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
 8001de8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001df0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001df2:	7dfb      	ldrb	r3, [r7, #23]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d003      	beq.n	8001e00 <HAL_CAN_GetRxMessage+0x24>
 8001df8:	7dfb      	ldrb	r3, [r7, #23]
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	f040 8103 	bne.w	8002006 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10e      	bne.n	8001e24 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	f003 0303 	and.w	r3, r3, #3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d116      	bne.n	8001e42 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e18:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e0f7      	b.n	8002014 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d107      	bne.n	8001e42 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e36:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e0e8      	b.n	8002014 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	331b      	adds	r3, #27
 8001e4a:	011b      	lsls	r3, r3, #4
 8001e4c:	4413      	add	r3, r2
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0204 	and.w	r2, r3, #4
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d10c      	bne.n	8001e7a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	331b      	adds	r3, #27
 8001e68:	011b      	lsls	r3, r3, #4
 8001e6a:	4413      	add	r3, r2
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	0d5b      	lsrs	r3, r3, #21
 8001e70:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	e00b      	b.n	8001e92 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	331b      	adds	r3, #27
 8001e82:	011b      	lsls	r3, r3, #4
 8001e84:	4413      	add	r3, r2
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	08db      	lsrs	r3, r3, #3
 8001e8a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	331b      	adds	r3, #27
 8001e9a:	011b      	lsls	r3, r3, #4
 8001e9c:	4413      	add	r3, r2
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0202 	and.w	r2, r3, #2
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	331b      	adds	r3, #27
 8001eb0:	011b      	lsls	r3, r3, #4
 8001eb2:	4413      	add	r3, r2
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0308 	and.w	r3, r3, #8
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2208      	movs	r2, #8
 8001ec4:	611a      	str	r2, [r3, #16]
 8001ec6:	e00b      	b.n	8001ee0 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	331b      	adds	r3, #27
 8001ed0:	011b      	lsls	r3, r3, #4
 8001ed2:	4413      	add	r3, r2
 8001ed4:	3304      	adds	r3, #4
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 020f 	and.w	r2, r3, #15
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	331b      	adds	r3, #27
 8001ee8:	011b      	lsls	r3, r3, #4
 8001eea:	4413      	add	r3, r2
 8001eec:	3304      	adds	r3, #4
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	0a1b      	lsrs	r3, r3, #8
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	331b      	adds	r3, #27
 8001f00:	011b      	lsls	r3, r3, #4
 8001f02:	4413      	add	r3, r2
 8001f04:	3304      	adds	r3, #4
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	0c1b      	lsrs	r3, r3, #16
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	011b      	lsls	r3, r3, #4
 8001f18:	4413      	add	r3, r2
 8001f1a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	011b      	lsls	r3, r3, #4
 8001f2e:	4413      	add	r3, r2
 8001f30:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	0a1a      	lsrs	r2, r3, #8
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	b2d2      	uxtb	r2, r2
 8001f3e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	011b      	lsls	r3, r3, #4
 8001f48:	4413      	add	r3, r2
 8001f4a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	0c1a      	lsrs	r2, r3, #16
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	3302      	adds	r3, #2
 8001f56:	b2d2      	uxtb	r2, r2
 8001f58:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	011b      	lsls	r3, r3, #4
 8001f62:	4413      	add	r3, r2
 8001f64:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	0e1a      	lsrs	r2, r3, #24
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	3303      	adds	r3, #3
 8001f70:	b2d2      	uxtb	r2, r2
 8001f72:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	011b      	lsls	r3, r3, #4
 8001f7c:	4413      	add	r3, r2
 8001f7e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	3304      	adds	r3, #4
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	011b      	lsls	r3, r3, #4
 8001f94:	4413      	add	r3, r2
 8001f96:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	0a1a      	lsrs	r2, r3, #8
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	3305      	adds	r3, #5
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	011b      	lsls	r3, r3, #4
 8001fae:	4413      	add	r3, r2
 8001fb0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	0c1a      	lsrs	r2, r3, #16
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	3306      	adds	r3, #6
 8001fbc:	b2d2      	uxtb	r2, r2
 8001fbe:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	011b      	lsls	r3, r3, #4
 8001fc8:	4413      	add	r3, r2
 8001fca:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	0e1a      	lsrs	r2, r3, #24
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	3307      	adds	r3, #7
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d108      	bne.n	8001ff2 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68da      	ldr	r2, [r3, #12]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f042 0220 	orr.w	r2, r2, #32
 8001fee:	60da      	str	r2, [r3, #12]
 8001ff0:	e007      	b.n	8002002 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	691a      	ldr	r2, [r3, #16]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f042 0220 	orr.w	r2, r2, #32
 8002000:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002002:	2300      	movs	r3, #0
 8002004:	e006      	b.n	8002014 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800200a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
  }
}
 8002014:	4618      	mov	r0, r3
 8002016:	371c      	adds	r7, #28
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002030:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002032:	7bfb      	ldrb	r3, [r7, #15]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d002      	beq.n	800203e <HAL_CAN_ActivateNotification+0x1e>
 8002038:	7bfb      	ldrb	r3, [r7, #15]
 800203a:	2b02      	cmp	r3, #2
 800203c:	d109      	bne.n	8002052 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6959      	ldr	r1, [r3, #20]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	430a      	orrs	r2, r1
 800204c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800204e:	2300      	movs	r3, #0
 8002050:	e006      	b.n	8002060 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002056:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
  }
}
 8002060:	4618      	mov	r0, r3
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b08a      	sub	sp, #40	@ 0x28
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002074:	2300      	movs	r3, #0
 8002076:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80020a8:	6a3b      	ldr	r3, [r7, #32]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d07c      	beq.n	80021ac <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d023      	beq.n	8002104 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2201      	movs	r2, #1
 80020c2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f983 	bl	80023da <HAL_CAN_TxMailbox0CompleteCallback>
 80020d4:	e016      	b.n	8002104 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d004      	beq.n	80020ea <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80020e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80020e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80020e8:	e00c      	b.n	8002104 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	f003 0308 	and.w	r3, r3, #8
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d004      	beq.n	80020fe <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80020f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80020fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80020fc:	e002      	b.n	8002104 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 f989 	bl	8002416 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800210a:	2b00      	cmp	r3, #0
 800210c:	d024      	beq.n	8002158 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002116:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f963 	bl	80023ee <HAL_CAN_TxMailbox1CompleteCallback>
 8002128:	e016      	b.n	8002158 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002130:	2b00      	cmp	r3, #0
 8002132:	d004      	beq.n	800213e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002136:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800213a:	627b      	str	r3, [r7, #36]	@ 0x24
 800213c:	e00c      	b.n	8002158 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002144:	2b00      	cmp	r3, #0
 8002146:	d004      	beq.n	8002152 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800214e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002150:	e002      	b.n	8002158 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f969 	bl	800242a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d024      	beq.n	80021ac <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800216a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f943 	bl	8002402 <HAL_CAN_TxMailbox2CompleteCallback>
 800217c:	e016      	b.n	80021ac <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d004      	beq.n	8002192 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800218e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002190:	e00c      	b.n	80021ac <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d004      	beq.n	80021a6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800219c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80021a4:	e002      	b.n	80021ac <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 f949 	bl	800243e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80021ac:	6a3b      	ldr	r3, [r7, #32]
 80021ae:	f003 0308 	and.w	r3, r3, #8
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00c      	beq.n	80021d0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	f003 0310 	and.w	r3, r3, #16
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d007      	beq.n	80021d0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80021c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021c6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2210      	movs	r2, #16
 80021ce:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80021d0:	6a3b      	ldr	r3, [r7, #32]
 80021d2:	f003 0304 	and.w	r3, r3, #4
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00b      	beq.n	80021f2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f003 0308 	and.w	r3, r3, #8
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d006      	beq.n	80021f2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2208      	movs	r2, #8
 80021ea:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 f93a 	bl	8002466 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80021f2:	6a3b      	ldr	r3, [r7, #32]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d009      	beq.n	8002210 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d002      	beq.n	8002210 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f921 	bl	8002452 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002210:	6a3b      	ldr	r3, [r7, #32]
 8002212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00c      	beq.n	8002234 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	f003 0310 	and.w	r3, r3, #16
 8002220:	2b00      	cmp	r3, #0
 8002222:	d007      	beq.n	8002234 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002226:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800222a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2210      	movs	r2, #16
 8002232:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002234:	6a3b      	ldr	r3, [r7, #32]
 8002236:	f003 0320 	and.w	r3, r3, #32
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00b      	beq.n	8002256 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	f003 0308 	and.w	r3, r3, #8
 8002244:	2b00      	cmp	r3, #0
 8002246:	d006      	beq.n	8002256 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2208      	movs	r2, #8
 800224e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 f912 	bl	800247a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002256:	6a3b      	ldr	r3, [r7, #32]
 8002258:	f003 0310 	and.w	r3, r3, #16
 800225c:	2b00      	cmp	r3, #0
 800225e:	d009      	beq.n	8002274 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	f003 0303 	and.w	r3, r3, #3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d002      	beq.n	8002274 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7fe fdbc 	bl	8000dec <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002274:	6a3b      	ldr	r3, [r7, #32]
 8002276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00b      	beq.n	8002296 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	f003 0310 	and.w	r3, r3, #16
 8002284:	2b00      	cmp	r3, #0
 8002286:	d006      	beq.n	8002296 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2210      	movs	r2, #16
 800228e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 f8fc 	bl	800248e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002296:	6a3b      	ldr	r3, [r7, #32]
 8002298:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00b      	beq.n	80022b8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d006      	beq.n	80022b8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2208      	movs	r2, #8
 80022b0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f8f5 	bl	80024a2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80022b8:	6a3b      	ldr	r3, [r7, #32]
 80022ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d07b      	beq.n	80023ba <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	f003 0304 	and.w	r3, r3, #4
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d072      	beq.n	80023b2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80022cc:	6a3b      	ldr	r3, [r7, #32]
 80022ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d008      	beq.n	80022e8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d003      	beq.n	80022e8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80022e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e2:	f043 0301 	orr.w	r3, r3, #1
 80022e6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80022e8:	6a3b      	ldr	r3, [r7, #32]
 80022ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d008      	beq.n	8002304 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d003      	beq.n	8002304 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80022fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fe:	f043 0302 	orr.w	r3, r3, #2
 8002302:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002304:	6a3b      	ldr	r3, [r7, #32]
 8002306:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800230a:	2b00      	cmp	r3, #0
 800230c:	d008      	beq.n	8002320 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231a:	f043 0304 	orr.w	r3, r3, #4
 800231e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002320:	6a3b      	ldr	r3, [r7, #32]
 8002322:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002326:	2b00      	cmp	r3, #0
 8002328:	d043      	beq.n	80023b2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002330:	2b00      	cmp	r3, #0
 8002332:	d03e      	beq.n	80023b2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800233a:	2b60      	cmp	r3, #96	@ 0x60
 800233c:	d02b      	beq.n	8002396 <HAL_CAN_IRQHandler+0x32a>
 800233e:	2b60      	cmp	r3, #96	@ 0x60
 8002340:	d82e      	bhi.n	80023a0 <HAL_CAN_IRQHandler+0x334>
 8002342:	2b50      	cmp	r3, #80	@ 0x50
 8002344:	d022      	beq.n	800238c <HAL_CAN_IRQHandler+0x320>
 8002346:	2b50      	cmp	r3, #80	@ 0x50
 8002348:	d82a      	bhi.n	80023a0 <HAL_CAN_IRQHandler+0x334>
 800234a:	2b40      	cmp	r3, #64	@ 0x40
 800234c:	d019      	beq.n	8002382 <HAL_CAN_IRQHandler+0x316>
 800234e:	2b40      	cmp	r3, #64	@ 0x40
 8002350:	d826      	bhi.n	80023a0 <HAL_CAN_IRQHandler+0x334>
 8002352:	2b30      	cmp	r3, #48	@ 0x30
 8002354:	d010      	beq.n	8002378 <HAL_CAN_IRQHandler+0x30c>
 8002356:	2b30      	cmp	r3, #48	@ 0x30
 8002358:	d822      	bhi.n	80023a0 <HAL_CAN_IRQHandler+0x334>
 800235a:	2b10      	cmp	r3, #16
 800235c:	d002      	beq.n	8002364 <HAL_CAN_IRQHandler+0x2f8>
 800235e:	2b20      	cmp	r3, #32
 8002360:	d005      	beq.n	800236e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002362:	e01d      	b.n	80023a0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002366:	f043 0308 	orr.w	r3, r3, #8
 800236a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800236c:	e019      	b.n	80023a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800236e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002370:	f043 0310 	orr.w	r3, r3, #16
 8002374:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002376:	e014      	b.n	80023a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800237a:	f043 0320 	orr.w	r3, r3, #32
 800237e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002380:	e00f      	b.n	80023a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002384:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002388:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800238a:	e00a      	b.n	80023a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800238c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800238e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002392:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002394:	e005      	b.n	80023a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002398:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800239c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800239e:	e000      	b.n	80023a2 <HAL_CAN_IRQHandler+0x336>
            break;
 80023a0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	699a      	ldr	r2, [r3, #24]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80023b0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2204      	movs	r2, #4
 80023b8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80023ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d008      	beq.n	80023d2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c6:	431a      	orrs	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f000 f872 	bl	80024b6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80023d2:	bf00      	nop
 80023d4:	3728      	adds	r7, #40	@ 0x28
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80023da:	b480      	push	{r7}
 80023dc:	b083      	sub	sp, #12
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80023ee:	b480      	push	{r7}
 80023f0:	b083      	sub	sp, #12
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002416:	b480      	push	{r7}
 8002418:	b083      	sub	sp, #12
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800242a:	b480      	push	{r7}
 800242c:	b083      	sub	sp, #12
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002452:	b480      	push	{r7}
 8002454:	b083      	sub	sp, #12
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002496:	bf00      	nop
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
	...

080024cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002510 <__NVIC_SetPriorityGrouping+0x44>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024e2:	68ba      	ldr	r2, [r7, #8]
 80024e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024e8:	4013      	ands	r3, r2
 80024ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024fe:	4a04      	ldr	r2, [pc, #16]	@ (8002510 <__NVIC_SetPriorityGrouping+0x44>)
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	60d3      	str	r3, [r2, #12]
}
 8002504:	bf00      	nop
 8002506:	3714      	adds	r7, #20
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	e000ed00 	.word	0xe000ed00

08002514 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002518:	4b04      	ldr	r3, [pc, #16]	@ (800252c <__NVIC_GetPriorityGrouping+0x18>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	0a1b      	lsrs	r3, r3, #8
 800251e:	f003 0307 	and.w	r3, r3, #7
}
 8002522:	4618      	mov	r0, r3
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	e000ed00 	.word	0xe000ed00

08002530 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	4603      	mov	r3, r0
 8002538:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800253a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253e:	2b00      	cmp	r3, #0
 8002540:	db0b      	blt.n	800255a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002542:	79fb      	ldrb	r3, [r7, #7]
 8002544:	f003 021f 	and.w	r2, r3, #31
 8002548:	4907      	ldr	r1, [pc, #28]	@ (8002568 <__NVIC_EnableIRQ+0x38>)
 800254a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254e:	095b      	lsrs	r3, r3, #5
 8002550:	2001      	movs	r0, #1
 8002552:	fa00 f202 	lsl.w	r2, r0, r2
 8002556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	e000e100 	.word	0xe000e100

0800256c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	6039      	str	r1, [r7, #0]
 8002576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257c:	2b00      	cmp	r3, #0
 800257e:	db0a      	blt.n	8002596 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	b2da      	uxtb	r2, r3
 8002584:	490c      	ldr	r1, [pc, #48]	@ (80025b8 <__NVIC_SetPriority+0x4c>)
 8002586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258a:	0112      	lsls	r2, r2, #4
 800258c:	b2d2      	uxtb	r2, r2
 800258e:	440b      	add	r3, r1
 8002590:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002594:	e00a      	b.n	80025ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	b2da      	uxtb	r2, r3
 800259a:	4908      	ldr	r1, [pc, #32]	@ (80025bc <__NVIC_SetPriority+0x50>)
 800259c:	79fb      	ldrb	r3, [r7, #7]
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	3b04      	subs	r3, #4
 80025a4:	0112      	lsls	r2, r2, #4
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	440b      	add	r3, r1
 80025aa:	761a      	strb	r2, [r3, #24]
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	e000e100 	.word	0xe000e100
 80025bc:	e000ed00 	.word	0xe000ed00

080025c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b089      	sub	sp, #36	@ 0x24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	f1c3 0307 	rsb	r3, r3, #7
 80025da:	2b04      	cmp	r3, #4
 80025dc:	bf28      	it	cs
 80025de:	2304      	movcs	r3, #4
 80025e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	3304      	adds	r3, #4
 80025e6:	2b06      	cmp	r3, #6
 80025e8:	d902      	bls.n	80025f0 <NVIC_EncodePriority+0x30>
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	3b03      	subs	r3, #3
 80025ee:	e000      	b.n	80025f2 <NVIC_EncodePriority+0x32>
 80025f0:	2300      	movs	r3, #0
 80025f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	43da      	mvns	r2, r3
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	401a      	ands	r2, r3
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002608:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	fa01 f303 	lsl.w	r3, r1, r3
 8002612:	43d9      	mvns	r1, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002618:	4313      	orrs	r3, r2
         );
}
 800261a:	4618      	mov	r0, r3
 800261c:	3724      	adds	r7, #36	@ 0x24
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
	...

08002628 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3b01      	subs	r3, #1
 8002634:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002638:	d301      	bcc.n	800263e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800263a:	2301      	movs	r3, #1
 800263c:	e00f      	b.n	800265e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800263e:	4a0a      	ldr	r2, [pc, #40]	@ (8002668 <SysTick_Config+0x40>)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3b01      	subs	r3, #1
 8002644:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002646:	210f      	movs	r1, #15
 8002648:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800264c:	f7ff ff8e 	bl	800256c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002650:	4b05      	ldr	r3, [pc, #20]	@ (8002668 <SysTick_Config+0x40>)
 8002652:	2200      	movs	r2, #0
 8002654:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002656:	4b04      	ldr	r3, [pc, #16]	@ (8002668 <SysTick_Config+0x40>)
 8002658:	2207      	movs	r2, #7
 800265a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	e000e010 	.word	0xe000e010

0800266c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f7ff ff29 	bl	80024cc <__NVIC_SetPriorityGrouping>
}
 800267a:	bf00      	nop
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002682:	b580      	push	{r7, lr}
 8002684:	b086      	sub	sp, #24
 8002686:	af00      	add	r7, sp, #0
 8002688:	4603      	mov	r3, r0
 800268a:	60b9      	str	r1, [r7, #8]
 800268c:	607a      	str	r2, [r7, #4]
 800268e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002694:	f7ff ff3e 	bl	8002514 <__NVIC_GetPriorityGrouping>
 8002698:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	68b9      	ldr	r1, [r7, #8]
 800269e:	6978      	ldr	r0, [r7, #20]
 80026a0:	f7ff ff8e 	bl	80025c0 <NVIC_EncodePriority>
 80026a4:	4602      	mov	r2, r0
 80026a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026aa:	4611      	mov	r1, r2
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff ff5d 	bl	800256c <__NVIC_SetPriority>
}
 80026b2:	bf00      	nop
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b082      	sub	sp, #8
 80026be:	af00      	add	r7, sp, #0
 80026c0:	4603      	mov	r3, r0
 80026c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff ff31 	bl	8002530 <__NVIC_EnableIRQ>
}
 80026ce:	bf00      	nop
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b082      	sub	sp, #8
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7ff ffa2 	bl	8002628 <SysTick_Config>
 80026e4:	4603      	mov	r3, r0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
	...

080026f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b089      	sub	sp, #36	@ 0x24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026fa:	2300      	movs	r3, #0
 80026fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026fe:	2300      	movs	r3, #0
 8002700:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002702:	2300      	movs	r3, #0
 8002704:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002706:	2300      	movs	r3, #0
 8002708:	61fb      	str	r3, [r7, #28]
 800270a:	e16b      	b.n	80029e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800270c:	2201      	movs	r2, #1
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	4013      	ands	r3, r2
 800271e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	429a      	cmp	r2, r3
 8002726:	f040 815a 	bne.w	80029de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f003 0303 	and.w	r3, r3, #3
 8002732:	2b01      	cmp	r3, #1
 8002734:	d005      	beq.n	8002742 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800273e:	2b02      	cmp	r3, #2
 8002740:	d130      	bne.n	80027a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	2203      	movs	r2, #3
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	43db      	mvns	r3, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4013      	ands	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	68da      	ldr	r2, [r3, #12]
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4313      	orrs	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002778:	2201      	movs	r2, #1
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	43db      	mvns	r3, r3
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4013      	ands	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	091b      	lsrs	r3, r3, #4
 800278e:	f003 0201 	and.w	r2, r3, #1
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4313      	orrs	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 0303 	and.w	r3, r3, #3
 80027ac:	2b03      	cmp	r3, #3
 80027ae:	d017      	beq.n	80027e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	2203      	movs	r2, #3
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	43db      	mvns	r3, r3
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4013      	ands	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f003 0303 	and.w	r3, r3, #3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d123      	bne.n	8002834 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	08da      	lsrs	r2, r3, #3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	3208      	adds	r2, #8
 80027f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	220f      	movs	r2, #15
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43db      	mvns	r3, r3
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4013      	ands	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	691a      	ldr	r2, [r3, #16]
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4313      	orrs	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	08da      	lsrs	r2, r3, #3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	3208      	adds	r2, #8
 800282e:	69b9      	ldr	r1, [r7, #24]
 8002830:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	2203      	movs	r2, #3
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	43db      	mvns	r3, r3
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	4013      	ands	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f003 0203 	and.w	r2, r3, #3
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4313      	orrs	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002870:	2b00      	cmp	r3, #0
 8002872:	f000 80b4 	beq.w	80029de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	4b60      	ldr	r3, [pc, #384]	@ (80029fc <HAL_GPIO_Init+0x30c>)
 800287c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800287e:	4a5f      	ldr	r2, [pc, #380]	@ (80029fc <HAL_GPIO_Init+0x30c>)
 8002880:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002884:	6453      	str	r3, [r2, #68]	@ 0x44
 8002886:	4b5d      	ldr	r3, [pc, #372]	@ (80029fc <HAL_GPIO_Init+0x30c>)
 8002888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002892:	4a5b      	ldr	r2, [pc, #364]	@ (8002a00 <HAL_GPIO_Init+0x310>)
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	089b      	lsrs	r3, r3, #2
 8002898:	3302      	adds	r3, #2
 800289a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800289e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f003 0303 	and.w	r3, r3, #3
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	220f      	movs	r2, #15
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	43db      	mvns	r3, r3
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	4013      	ands	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a52      	ldr	r2, [pc, #328]	@ (8002a04 <HAL_GPIO_Init+0x314>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d02b      	beq.n	8002916 <HAL_GPIO_Init+0x226>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a51      	ldr	r2, [pc, #324]	@ (8002a08 <HAL_GPIO_Init+0x318>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d025      	beq.n	8002912 <HAL_GPIO_Init+0x222>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a50      	ldr	r2, [pc, #320]	@ (8002a0c <HAL_GPIO_Init+0x31c>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d01f      	beq.n	800290e <HAL_GPIO_Init+0x21e>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a4f      	ldr	r2, [pc, #316]	@ (8002a10 <HAL_GPIO_Init+0x320>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d019      	beq.n	800290a <HAL_GPIO_Init+0x21a>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a4e      	ldr	r2, [pc, #312]	@ (8002a14 <HAL_GPIO_Init+0x324>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d013      	beq.n	8002906 <HAL_GPIO_Init+0x216>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a4d      	ldr	r2, [pc, #308]	@ (8002a18 <HAL_GPIO_Init+0x328>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d00d      	beq.n	8002902 <HAL_GPIO_Init+0x212>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a4c      	ldr	r2, [pc, #304]	@ (8002a1c <HAL_GPIO_Init+0x32c>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d007      	beq.n	80028fe <HAL_GPIO_Init+0x20e>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a4b      	ldr	r2, [pc, #300]	@ (8002a20 <HAL_GPIO_Init+0x330>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d101      	bne.n	80028fa <HAL_GPIO_Init+0x20a>
 80028f6:	2307      	movs	r3, #7
 80028f8:	e00e      	b.n	8002918 <HAL_GPIO_Init+0x228>
 80028fa:	2308      	movs	r3, #8
 80028fc:	e00c      	b.n	8002918 <HAL_GPIO_Init+0x228>
 80028fe:	2306      	movs	r3, #6
 8002900:	e00a      	b.n	8002918 <HAL_GPIO_Init+0x228>
 8002902:	2305      	movs	r3, #5
 8002904:	e008      	b.n	8002918 <HAL_GPIO_Init+0x228>
 8002906:	2304      	movs	r3, #4
 8002908:	e006      	b.n	8002918 <HAL_GPIO_Init+0x228>
 800290a:	2303      	movs	r3, #3
 800290c:	e004      	b.n	8002918 <HAL_GPIO_Init+0x228>
 800290e:	2302      	movs	r3, #2
 8002910:	e002      	b.n	8002918 <HAL_GPIO_Init+0x228>
 8002912:	2301      	movs	r3, #1
 8002914:	e000      	b.n	8002918 <HAL_GPIO_Init+0x228>
 8002916:	2300      	movs	r3, #0
 8002918:	69fa      	ldr	r2, [r7, #28]
 800291a:	f002 0203 	and.w	r2, r2, #3
 800291e:	0092      	lsls	r2, r2, #2
 8002920:	4093      	lsls	r3, r2
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4313      	orrs	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002928:	4935      	ldr	r1, [pc, #212]	@ (8002a00 <HAL_GPIO_Init+0x310>)
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	089b      	lsrs	r3, r3, #2
 800292e:	3302      	adds	r3, #2
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002936:	4b3b      	ldr	r3, [pc, #236]	@ (8002a24 <HAL_GPIO_Init+0x334>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	43db      	mvns	r3, r3
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	4013      	ands	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	4313      	orrs	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800295a:	4a32      	ldr	r2, [pc, #200]	@ (8002a24 <HAL_GPIO_Init+0x334>)
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002960:	4b30      	ldr	r3, [pc, #192]	@ (8002a24 <HAL_GPIO_Init+0x334>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	43db      	mvns	r3, r3
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	4013      	ands	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d003      	beq.n	8002984 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	4313      	orrs	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002984:	4a27      	ldr	r2, [pc, #156]	@ (8002a24 <HAL_GPIO_Init+0x334>)
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800298a:	4b26      	ldr	r3, [pc, #152]	@ (8002a24 <HAL_GPIO_Init+0x334>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	43db      	mvns	r3, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4013      	ands	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029ae:	4a1d      	ldr	r2, [pc, #116]	@ (8002a24 <HAL_GPIO_Init+0x334>)
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a24 <HAL_GPIO_Init+0x334>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	43db      	mvns	r3, r3
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4013      	ands	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029d8:	4a12      	ldr	r2, [pc, #72]	@ (8002a24 <HAL_GPIO_Init+0x334>)
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	3301      	adds	r3, #1
 80029e2:	61fb      	str	r3, [r7, #28]
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	2b0f      	cmp	r3, #15
 80029e8:	f67f ae90 	bls.w	800270c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029ec:	bf00      	nop
 80029ee:	bf00      	nop
 80029f0:	3724      	adds	r7, #36	@ 0x24
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	40023800 	.word	0x40023800
 8002a00:	40013800 	.word	0x40013800
 8002a04:	40020000 	.word	0x40020000
 8002a08:	40020400 	.word	0x40020400
 8002a0c:	40020800 	.word	0x40020800
 8002a10:	40020c00 	.word	0x40020c00
 8002a14:	40021000 	.word	0x40021000
 8002a18:	40021400 	.word	0x40021400
 8002a1c:	40021800 	.word	0x40021800
 8002a20:	40021c00 	.word	0x40021c00
 8002a24:	40013c00 	.word	0x40013c00

08002a28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	460b      	mov	r3, r1
 8002a32:	807b      	strh	r3, [r7, #2]
 8002a34:	4613      	mov	r3, r2
 8002a36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a38:	787b      	ldrb	r3, [r7, #1]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a3e:	887a      	ldrh	r2, [r7, #2]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a44:	e003      	b.n	8002a4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a46:	887b      	ldrh	r3, [r7, #2]
 8002a48:	041a      	lsls	r2, r3, #16
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	619a      	str	r2, [r3, #24]
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
	...

08002a5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e12b      	b.n	8002cc6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d106      	bne.n	8002a88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7fe fce8 	bl	8001458 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2224      	movs	r2, #36	@ 0x24
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 0201 	bic.w	r2, r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002aae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002abe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ac0:	f000 fd80 	bl	80035c4 <HAL_RCC_GetPCLK1Freq>
 8002ac4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	4a81      	ldr	r2, [pc, #516]	@ (8002cd0 <HAL_I2C_Init+0x274>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d807      	bhi.n	8002ae0 <HAL_I2C_Init+0x84>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4a80      	ldr	r2, [pc, #512]	@ (8002cd4 <HAL_I2C_Init+0x278>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	bf94      	ite	ls
 8002ad8:	2301      	movls	r3, #1
 8002ada:	2300      	movhi	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	e006      	b.n	8002aee <HAL_I2C_Init+0x92>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	4a7d      	ldr	r2, [pc, #500]	@ (8002cd8 <HAL_I2C_Init+0x27c>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	bf94      	ite	ls
 8002ae8:	2301      	movls	r3, #1
 8002aea:	2300      	movhi	r3, #0
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e0e7      	b.n	8002cc6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	4a78      	ldr	r2, [pc, #480]	@ (8002cdc <HAL_I2C_Init+0x280>)
 8002afa:	fba2 2303 	umull	r2, r3, r2, r3
 8002afe:	0c9b      	lsrs	r3, r3, #18
 8002b00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68ba      	ldr	r2, [r7, #8]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	4a6a      	ldr	r2, [pc, #424]	@ (8002cd0 <HAL_I2C_Init+0x274>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d802      	bhi.n	8002b30 <HAL_I2C_Init+0xd4>
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	e009      	b.n	8002b44 <HAL_I2C_Init+0xe8>
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002b36:	fb02 f303 	mul.w	r3, r2, r3
 8002b3a:	4a69      	ldr	r2, [pc, #420]	@ (8002ce0 <HAL_I2C_Init+0x284>)
 8002b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b40:	099b      	lsrs	r3, r3, #6
 8002b42:	3301      	adds	r3, #1
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	6812      	ldr	r2, [r2, #0]
 8002b48:	430b      	orrs	r3, r1
 8002b4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002b56:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	495c      	ldr	r1, [pc, #368]	@ (8002cd0 <HAL_I2C_Init+0x274>)
 8002b60:	428b      	cmp	r3, r1
 8002b62:	d819      	bhi.n	8002b98 <HAL_I2C_Init+0x13c>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	1e59      	subs	r1, r3, #1
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b72:	1c59      	adds	r1, r3, #1
 8002b74:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002b78:	400b      	ands	r3, r1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00a      	beq.n	8002b94 <HAL_I2C_Init+0x138>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	1e59      	subs	r1, r3, #1
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b92:	e051      	b.n	8002c38 <HAL_I2C_Init+0x1dc>
 8002b94:	2304      	movs	r3, #4
 8002b96:	e04f      	b.n	8002c38 <HAL_I2C_Init+0x1dc>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d111      	bne.n	8002bc4 <HAL_I2C_Init+0x168>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	1e58      	subs	r0, r3, #1
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6859      	ldr	r1, [r3, #4]
 8002ba8:	460b      	mov	r3, r1
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	440b      	add	r3, r1
 8002bae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	bf0c      	ite	eq
 8002bbc:	2301      	moveq	r3, #1
 8002bbe:	2300      	movne	r3, #0
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	e012      	b.n	8002bea <HAL_I2C_Init+0x18e>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	1e58      	subs	r0, r3, #1
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6859      	ldr	r1, [r3, #4]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	0099      	lsls	r1, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bda:	3301      	adds	r3, #1
 8002bdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	bf0c      	ite	eq
 8002be4:	2301      	moveq	r3, #1
 8002be6:	2300      	movne	r3, #0
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <HAL_I2C_Init+0x196>
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e022      	b.n	8002c38 <HAL_I2C_Init+0x1dc>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10e      	bne.n	8002c18 <HAL_I2C_Init+0x1bc>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	1e58      	subs	r0, r3, #1
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6859      	ldr	r1, [r3, #4]
 8002c02:	460b      	mov	r3, r1
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	440b      	add	r3, r1
 8002c08:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c16:	e00f      	b.n	8002c38 <HAL_I2C_Init+0x1dc>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	1e58      	subs	r0, r3, #1
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6859      	ldr	r1, [r3, #4]
 8002c20:	460b      	mov	r3, r1
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	440b      	add	r3, r1
 8002c26:	0099      	lsls	r1, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c2e:	3301      	adds	r3, #1
 8002c30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c38:	6879      	ldr	r1, [r7, #4]
 8002c3a:	6809      	ldr	r1, [r1, #0]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69da      	ldr	r2, [r3, #28]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	431a      	orrs	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002c66:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	6911      	ldr	r1, [r2, #16]
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	68d2      	ldr	r2, [r2, #12]
 8002c72:	4311      	orrs	r1, r2
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	6812      	ldr	r2, [r2, #0]
 8002c78:	430b      	orrs	r3, r1
 8002c7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	695a      	ldr	r2, [r3, #20]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f042 0201 	orr.w	r2, r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2220      	movs	r2, #32
 8002cb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	000186a0 	.word	0x000186a0
 8002cd4:	001e847f 	.word	0x001e847f
 8002cd8:	003d08ff 	.word	0x003d08ff
 8002cdc:	431bde83 	.word	0x431bde83
 8002ce0:	10624dd3 	.word	0x10624dd3

08002ce4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e267      	b.n	80031c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d075      	beq.n	8002dee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d02:	4b88      	ldr	r3, [pc, #544]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 030c 	and.w	r3, r3, #12
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	d00c      	beq.n	8002d28 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d0e:	4b85      	ldr	r3, [pc, #532]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d16:	2b08      	cmp	r3, #8
 8002d18:	d112      	bne.n	8002d40 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d1a:	4b82      	ldr	r3, [pc, #520]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d26:	d10b      	bne.n	8002d40 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d28:	4b7e      	ldr	r3, [pc, #504]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d05b      	beq.n	8002dec <HAL_RCC_OscConfig+0x108>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d157      	bne.n	8002dec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e242      	b.n	80031c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d48:	d106      	bne.n	8002d58 <HAL_RCC_OscConfig+0x74>
 8002d4a:	4b76      	ldr	r3, [pc, #472]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a75      	ldr	r2, [pc, #468]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002d50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d54:	6013      	str	r3, [r2, #0]
 8002d56:	e01d      	b.n	8002d94 <HAL_RCC_OscConfig+0xb0>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d60:	d10c      	bne.n	8002d7c <HAL_RCC_OscConfig+0x98>
 8002d62:	4b70      	ldr	r3, [pc, #448]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a6f      	ldr	r2, [pc, #444]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002d68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d6c:	6013      	str	r3, [r2, #0]
 8002d6e:	4b6d      	ldr	r3, [pc, #436]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a6c      	ldr	r2, [pc, #432]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002d74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	e00b      	b.n	8002d94 <HAL_RCC_OscConfig+0xb0>
 8002d7c:	4b69      	ldr	r3, [pc, #420]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a68      	ldr	r2, [pc, #416]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002d82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d86:	6013      	str	r3, [r2, #0]
 8002d88:	4b66      	ldr	r3, [pc, #408]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a65      	ldr	r2, [pc, #404]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002d8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d013      	beq.n	8002dc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9c:	f7fe fcfe 	bl	800179c <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002da4:	f7fe fcfa 	bl	800179c <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b64      	cmp	r3, #100	@ 0x64
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e207      	b.n	80031c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db6:	4b5b      	ldr	r3, [pc, #364]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d0f0      	beq.n	8002da4 <HAL_RCC_OscConfig+0xc0>
 8002dc2:	e014      	b.n	8002dee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc4:	f7fe fcea 	bl	800179c <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dcc:	f7fe fce6 	bl	800179c <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b64      	cmp	r3, #100	@ 0x64
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e1f3      	b.n	80031c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dde:	4b51      	ldr	r3, [pc, #324]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1f0      	bne.n	8002dcc <HAL_RCC_OscConfig+0xe8>
 8002dea:	e000      	b.n	8002dee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d063      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002dfa:	4b4a      	ldr	r3, [pc, #296]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 030c 	and.w	r3, r3, #12
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00b      	beq.n	8002e1e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e06:	4b47      	ldr	r3, [pc, #284]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e0e:	2b08      	cmp	r3, #8
 8002e10:	d11c      	bne.n	8002e4c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e12:	4b44      	ldr	r3, [pc, #272]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d116      	bne.n	8002e4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e1e:	4b41      	ldr	r3, [pc, #260]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d005      	beq.n	8002e36 <HAL_RCC_OscConfig+0x152>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d001      	beq.n	8002e36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e1c7      	b.n	80031c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e36:	4b3b      	ldr	r3, [pc, #236]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	4937      	ldr	r1, [pc, #220]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e4a:	e03a      	b.n	8002ec2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d020      	beq.n	8002e96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e54:	4b34      	ldr	r3, [pc, #208]	@ (8002f28 <HAL_RCC_OscConfig+0x244>)
 8002e56:	2201      	movs	r2, #1
 8002e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5a:	f7fe fc9f 	bl	800179c <HAL_GetTick>
 8002e5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e60:	e008      	b.n	8002e74 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e62:	f7fe fc9b 	bl	800179c <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e1a8      	b.n	80031c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e74:	4b2b      	ldr	r3, [pc, #172]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d0f0      	beq.n	8002e62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e80:	4b28      	ldr	r3, [pc, #160]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	4925      	ldr	r1, [pc, #148]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	600b      	str	r3, [r1, #0]
 8002e94:	e015      	b.n	8002ec2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e96:	4b24      	ldr	r3, [pc, #144]	@ (8002f28 <HAL_RCC_OscConfig+0x244>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e9c:	f7fe fc7e 	bl	800179c <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ea4:	f7fe fc7a 	bl	800179c <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e187      	b.n	80031c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eb6:	4b1b      	ldr	r3, [pc, #108]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1f0      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0308 	and.w	r3, r3, #8
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d036      	beq.n	8002f3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d016      	beq.n	8002f04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ed6:	4b15      	ldr	r3, [pc, #84]	@ (8002f2c <HAL_RCC_OscConfig+0x248>)
 8002ed8:	2201      	movs	r2, #1
 8002eda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002edc:	f7fe fc5e 	bl	800179c <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ee4:	f7fe fc5a 	bl	800179c <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e167      	b.n	80031c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002ef8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0f0      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x200>
 8002f02:	e01b      	b.n	8002f3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f04:	4b09      	ldr	r3, [pc, #36]	@ (8002f2c <HAL_RCC_OscConfig+0x248>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f0a:	f7fe fc47 	bl	800179c <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f10:	e00e      	b.n	8002f30 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f12:	f7fe fc43 	bl	800179c <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d907      	bls.n	8002f30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e150      	b.n	80031c6 <HAL_RCC_OscConfig+0x4e2>
 8002f24:	40023800 	.word	0x40023800
 8002f28:	42470000 	.word	0x42470000
 8002f2c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f30:	4b88      	ldr	r3, [pc, #544]	@ (8003154 <HAL_RCC_OscConfig+0x470>)
 8002f32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1ea      	bne.n	8002f12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0304 	and.w	r3, r3, #4
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f000 8097 	beq.w	8003078 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f4e:	4b81      	ldr	r3, [pc, #516]	@ (8003154 <HAL_RCC_OscConfig+0x470>)
 8002f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10f      	bne.n	8002f7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60bb      	str	r3, [r7, #8]
 8002f5e:	4b7d      	ldr	r3, [pc, #500]	@ (8003154 <HAL_RCC_OscConfig+0x470>)
 8002f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f62:	4a7c      	ldr	r2, [pc, #496]	@ (8003154 <HAL_RCC_OscConfig+0x470>)
 8002f64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f68:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f6a:	4b7a      	ldr	r3, [pc, #488]	@ (8003154 <HAL_RCC_OscConfig+0x470>)
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f72:	60bb      	str	r3, [r7, #8]
 8002f74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f76:	2301      	movs	r3, #1
 8002f78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f7a:	4b77      	ldr	r3, [pc, #476]	@ (8003158 <HAL_RCC_OscConfig+0x474>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d118      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f86:	4b74      	ldr	r3, [pc, #464]	@ (8003158 <HAL_RCC_OscConfig+0x474>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a73      	ldr	r2, [pc, #460]	@ (8003158 <HAL_RCC_OscConfig+0x474>)
 8002f8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f92:	f7fe fc03 	bl	800179c <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f98:	e008      	b.n	8002fac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f9a:	f7fe fbff 	bl	800179c <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e10c      	b.n	80031c6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fac:	4b6a      	ldr	r3, [pc, #424]	@ (8003158 <HAL_RCC_OscConfig+0x474>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0f0      	beq.n	8002f9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d106      	bne.n	8002fce <HAL_RCC_OscConfig+0x2ea>
 8002fc0:	4b64      	ldr	r3, [pc, #400]	@ (8003154 <HAL_RCC_OscConfig+0x470>)
 8002fc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc4:	4a63      	ldr	r2, [pc, #396]	@ (8003154 <HAL_RCC_OscConfig+0x470>)
 8002fc6:	f043 0301 	orr.w	r3, r3, #1
 8002fca:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fcc:	e01c      	b.n	8003008 <HAL_RCC_OscConfig+0x324>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	2b05      	cmp	r3, #5
 8002fd4:	d10c      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x30c>
 8002fd6:	4b5f      	ldr	r3, [pc, #380]	@ (8003154 <HAL_RCC_OscConfig+0x470>)
 8002fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fda:	4a5e      	ldr	r2, [pc, #376]	@ (8003154 <HAL_RCC_OscConfig+0x470>)
 8002fdc:	f043 0304 	orr.w	r3, r3, #4
 8002fe0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fe2:	4b5c      	ldr	r3, [pc, #368]	@ (8003154 <HAL_RCC_OscConfig+0x470>)
 8002fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe6:	4a5b      	ldr	r2, [pc, #364]	@ (8003154 <HAL_RCC_OscConfig+0x470>)
 8002fe8:	f043 0301 	orr.w	r3, r3, #1
 8002fec:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fee:	e00b      	b.n	8003008 <HAL_RCC_OscConfig+0x324>
 8002ff0:	4b58      	ldr	r3, [pc, #352]	@ (8003154 <HAL_RCC_OscConfig+0x470>)
 8002ff2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ff4:	4a57      	ldr	r2, [pc, #348]	@ (8003154 <HAL_RCC_OscConfig+0x470>)
 8002ff6:	f023 0301 	bic.w	r3, r3, #1
 8002ffa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ffc:	4b55      	ldr	r3, [pc, #340]	@ (8003154 <HAL_RCC_OscConfig+0x470>)
 8002ffe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003000:	4a54      	ldr	r2, [pc, #336]	@ (8003154 <HAL_RCC_OscConfig+0x470>)
 8003002:	f023 0304 	bic.w	r3, r3, #4
 8003006:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d015      	beq.n	800303c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003010:	f7fe fbc4 	bl	800179c <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003016:	e00a      	b.n	800302e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003018:	f7fe fbc0 	bl	800179c <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003026:	4293      	cmp	r3, r2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e0cb      	b.n	80031c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800302e:	4b49      	ldr	r3, [pc, #292]	@ (8003154 <HAL_RCC_OscConfig+0x470>)
 8003030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d0ee      	beq.n	8003018 <HAL_RCC_OscConfig+0x334>
 800303a:	e014      	b.n	8003066 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800303c:	f7fe fbae 	bl	800179c <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003042:	e00a      	b.n	800305a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003044:	f7fe fbaa 	bl	800179c <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003052:	4293      	cmp	r3, r2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e0b5      	b.n	80031c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800305a:	4b3e      	ldr	r3, [pc, #248]	@ (8003154 <HAL_RCC_OscConfig+0x470>)
 800305c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1ee      	bne.n	8003044 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003066:	7dfb      	ldrb	r3, [r7, #23]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d105      	bne.n	8003078 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800306c:	4b39      	ldr	r3, [pc, #228]	@ (8003154 <HAL_RCC_OscConfig+0x470>)
 800306e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003070:	4a38      	ldr	r2, [pc, #224]	@ (8003154 <HAL_RCC_OscConfig+0x470>)
 8003072:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003076:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 80a1 	beq.w	80031c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003082:	4b34      	ldr	r3, [pc, #208]	@ (8003154 <HAL_RCC_OscConfig+0x470>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 030c 	and.w	r3, r3, #12
 800308a:	2b08      	cmp	r3, #8
 800308c:	d05c      	beq.n	8003148 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	2b02      	cmp	r3, #2
 8003094:	d141      	bne.n	800311a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003096:	4b31      	ldr	r3, [pc, #196]	@ (800315c <HAL_RCC_OscConfig+0x478>)
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309c:	f7fe fb7e 	bl	800179c <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a4:	f7fe fb7a 	bl	800179c <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e087      	b.n	80031c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030b6:	4b27      	ldr	r3, [pc, #156]	@ (8003154 <HAL_RCC_OscConfig+0x470>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f0      	bne.n	80030a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69da      	ldr	r2, [r3, #28]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d0:	019b      	lsls	r3, r3, #6
 80030d2:	431a      	orrs	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d8:	085b      	lsrs	r3, r3, #1
 80030da:	3b01      	subs	r3, #1
 80030dc:	041b      	lsls	r3, r3, #16
 80030de:	431a      	orrs	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e4:	061b      	lsls	r3, r3, #24
 80030e6:	491b      	ldr	r1, [pc, #108]	@ (8003154 <HAL_RCC_OscConfig+0x470>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030ec:	4b1b      	ldr	r3, [pc, #108]	@ (800315c <HAL_RCC_OscConfig+0x478>)
 80030ee:	2201      	movs	r2, #1
 80030f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f2:	f7fe fb53 	bl	800179c <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030f8:	e008      	b.n	800310c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030fa:	f7fe fb4f 	bl	800179c <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e05c      	b.n	80031c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800310c:	4b11      	ldr	r3, [pc, #68]	@ (8003154 <HAL_RCC_OscConfig+0x470>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d0f0      	beq.n	80030fa <HAL_RCC_OscConfig+0x416>
 8003118:	e054      	b.n	80031c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800311a:	4b10      	ldr	r3, [pc, #64]	@ (800315c <HAL_RCC_OscConfig+0x478>)
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003120:	f7fe fb3c 	bl	800179c <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003128:	f7fe fb38 	bl	800179c <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e045      	b.n	80031c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800313a:	4b06      	ldr	r3, [pc, #24]	@ (8003154 <HAL_RCC_OscConfig+0x470>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1f0      	bne.n	8003128 <HAL_RCC_OscConfig+0x444>
 8003146:	e03d      	b.n	80031c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d107      	bne.n	8003160 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e038      	b.n	80031c6 <HAL_RCC_OscConfig+0x4e2>
 8003154:	40023800 	.word	0x40023800
 8003158:	40007000 	.word	0x40007000
 800315c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003160:	4b1b      	ldr	r3, [pc, #108]	@ (80031d0 <HAL_RCC_OscConfig+0x4ec>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d028      	beq.n	80031c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003178:	429a      	cmp	r2, r3
 800317a:	d121      	bne.n	80031c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003186:	429a      	cmp	r2, r3
 8003188:	d11a      	bne.n	80031c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003190:	4013      	ands	r3, r2
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003196:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003198:	4293      	cmp	r3, r2
 800319a:	d111      	bne.n	80031c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031a6:	085b      	lsrs	r3, r3, #1
 80031a8:	3b01      	subs	r3, #1
 80031aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d107      	bne.n	80031c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031bc:	429a      	cmp	r2, r3
 80031be:	d001      	beq.n	80031c4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e000      	b.n	80031c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	40023800 	.word	0x40023800

080031d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0cc      	b.n	8003382 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031e8:	4b68      	ldr	r3, [pc, #416]	@ (800338c <HAL_RCC_ClockConfig+0x1b8>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d90c      	bls.n	8003210 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f6:	4b65      	ldr	r3, [pc, #404]	@ (800338c <HAL_RCC_ClockConfig+0x1b8>)
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	b2d2      	uxtb	r2, r2
 80031fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031fe:	4b63      	ldr	r3, [pc, #396]	@ (800338c <HAL_RCC_ClockConfig+0x1b8>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	429a      	cmp	r2, r3
 800320a:	d001      	beq.n	8003210 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e0b8      	b.n	8003382 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d020      	beq.n	800325e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0304 	and.w	r3, r3, #4
 8003224:	2b00      	cmp	r3, #0
 8003226:	d005      	beq.n	8003234 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003228:	4b59      	ldr	r3, [pc, #356]	@ (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	4a58      	ldr	r2, [pc, #352]	@ (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 800322e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003232:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0308 	and.w	r3, r3, #8
 800323c:	2b00      	cmp	r3, #0
 800323e:	d005      	beq.n	800324c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003240:	4b53      	ldr	r3, [pc, #332]	@ (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	4a52      	ldr	r2, [pc, #328]	@ (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 8003246:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800324a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800324c:	4b50      	ldr	r3, [pc, #320]	@ (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	494d      	ldr	r1, [pc, #308]	@ (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 800325a:	4313      	orrs	r3, r2
 800325c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b00      	cmp	r3, #0
 8003268:	d044      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d107      	bne.n	8003282 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003272:	4b47      	ldr	r3, [pc, #284]	@ (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d119      	bne.n	80032b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e07f      	b.n	8003382 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2b02      	cmp	r3, #2
 8003288:	d003      	beq.n	8003292 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800328e:	2b03      	cmp	r3, #3
 8003290:	d107      	bne.n	80032a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003292:	4b3f      	ldr	r3, [pc, #252]	@ (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d109      	bne.n	80032b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e06f      	b.n	8003382 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a2:	4b3b      	ldr	r3, [pc, #236]	@ (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e067      	b.n	8003382 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032b2:	4b37      	ldr	r3, [pc, #220]	@ (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f023 0203 	bic.w	r2, r3, #3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	4934      	ldr	r1, [pc, #208]	@ (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032c4:	f7fe fa6a 	bl	800179c <HAL_GetTick>
 80032c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ca:	e00a      	b.n	80032e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032cc:	f7fe fa66 	bl	800179c <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032da:	4293      	cmp	r3, r2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e04f      	b.n	8003382 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e2:	4b2b      	ldr	r3, [pc, #172]	@ (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 020c 	and.w	r2, r3, #12
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d1eb      	bne.n	80032cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032f4:	4b25      	ldr	r3, [pc, #148]	@ (800338c <HAL_RCC_ClockConfig+0x1b8>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0307 	and.w	r3, r3, #7
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d20c      	bcs.n	800331c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003302:	4b22      	ldr	r3, [pc, #136]	@ (800338c <HAL_RCC_ClockConfig+0x1b8>)
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	b2d2      	uxtb	r2, r2
 8003308:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800330a:	4b20      	ldr	r3, [pc, #128]	@ (800338c <HAL_RCC_ClockConfig+0x1b8>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0307 	and.w	r3, r3, #7
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	429a      	cmp	r2, r3
 8003316:	d001      	beq.n	800331c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e032      	b.n	8003382 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0304 	and.w	r3, r3, #4
 8003324:	2b00      	cmp	r3, #0
 8003326:	d008      	beq.n	800333a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003328:	4b19      	ldr	r3, [pc, #100]	@ (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	4916      	ldr	r1, [pc, #88]	@ (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 8003336:	4313      	orrs	r3, r2
 8003338:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0308 	and.w	r3, r3, #8
 8003342:	2b00      	cmp	r3, #0
 8003344:	d009      	beq.n	800335a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003346:	4b12      	ldr	r3, [pc, #72]	@ (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	490e      	ldr	r1, [pc, #56]	@ (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 8003356:	4313      	orrs	r3, r2
 8003358:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800335a:	f000 f821 	bl	80033a0 <HAL_RCC_GetSysClockFreq>
 800335e:	4602      	mov	r2, r0
 8003360:	4b0b      	ldr	r3, [pc, #44]	@ (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	091b      	lsrs	r3, r3, #4
 8003366:	f003 030f 	and.w	r3, r3, #15
 800336a:	490a      	ldr	r1, [pc, #40]	@ (8003394 <HAL_RCC_ClockConfig+0x1c0>)
 800336c:	5ccb      	ldrb	r3, [r1, r3]
 800336e:	fa22 f303 	lsr.w	r3, r2, r3
 8003372:	4a09      	ldr	r2, [pc, #36]	@ (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 8003374:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003376:	4b09      	ldr	r3, [pc, #36]	@ (800339c <HAL_RCC_ClockConfig+0x1c8>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f7fe f9ca 	bl	8001714 <HAL_InitTick>

  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	40023c00 	.word	0x40023c00
 8003390:	40023800 	.word	0x40023800
 8003394:	080047b0 	.word	0x080047b0
 8003398:	20000000 	.word	0x20000000
 800339c:	20000004 	.word	0x20000004

080033a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033a4:	b094      	sub	sp, #80	@ 0x50
 80033a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80033a8:	2300      	movs	r3, #0
 80033aa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80033ac:	2300      	movs	r3, #0
 80033ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80033b0:	2300      	movs	r3, #0
 80033b2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80033b4:	2300      	movs	r3, #0
 80033b6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033b8:	4b79      	ldr	r3, [pc, #484]	@ (80035a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 030c 	and.w	r3, r3, #12
 80033c0:	2b08      	cmp	r3, #8
 80033c2:	d00d      	beq.n	80033e0 <HAL_RCC_GetSysClockFreq+0x40>
 80033c4:	2b08      	cmp	r3, #8
 80033c6:	f200 80e1 	bhi.w	800358c <HAL_RCC_GetSysClockFreq+0x1ec>
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d002      	beq.n	80033d4 <HAL_RCC_GetSysClockFreq+0x34>
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	d003      	beq.n	80033da <HAL_RCC_GetSysClockFreq+0x3a>
 80033d2:	e0db      	b.n	800358c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033d4:	4b73      	ldr	r3, [pc, #460]	@ (80035a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80033d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033d8:	e0db      	b.n	8003592 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033da:	4b73      	ldr	r3, [pc, #460]	@ (80035a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80033dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033de:	e0d8      	b.n	8003592 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033e0:	4b6f      	ldr	r3, [pc, #444]	@ (80035a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033e8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033ea:	4b6d      	ldr	r3, [pc, #436]	@ (80035a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d063      	beq.n	80034be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033f6:	4b6a      	ldr	r3, [pc, #424]	@ (80035a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	099b      	lsrs	r3, r3, #6
 80033fc:	2200      	movs	r2, #0
 80033fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003400:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003404:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003408:	633b      	str	r3, [r7, #48]	@ 0x30
 800340a:	2300      	movs	r3, #0
 800340c:	637b      	str	r3, [r7, #52]	@ 0x34
 800340e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003412:	4622      	mov	r2, r4
 8003414:	462b      	mov	r3, r5
 8003416:	f04f 0000 	mov.w	r0, #0
 800341a:	f04f 0100 	mov.w	r1, #0
 800341e:	0159      	lsls	r1, r3, #5
 8003420:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003424:	0150      	lsls	r0, r2, #5
 8003426:	4602      	mov	r2, r0
 8003428:	460b      	mov	r3, r1
 800342a:	4621      	mov	r1, r4
 800342c:	1a51      	subs	r1, r2, r1
 800342e:	6139      	str	r1, [r7, #16]
 8003430:	4629      	mov	r1, r5
 8003432:	eb63 0301 	sbc.w	r3, r3, r1
 8003436:	617b      	str	r3, [r7, #20]
 8003438:	f04f 0200 	mov.w	r2, #0
 800343c:	f04f 0300 	mov.w	r3, #0
 8003440:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003444:	4659      	mov	r1, fp
 8003446:	018b      	lsls	r3, r1, #6
 8003448:	4651      	mov	r1, sl
 800344a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800344e:	4651      	mov	r1, sl
 8003450:	018a      	lsls	r2, r1, #6
 8003452:	4651      	mov	r1, sl
 8003454:	ebb2 0801 	subs.w	r8, r2, r1
 8003458:	4659      	mov	r1, fp
 800345a:	eb63 0901 	sbc.w	r9, r3, r1
 800345e:	f04f 0200 	mov.w	r2, #0
 8003462:	f04f 0300 	mov.w	r3, #0
 8003466:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800346a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800346e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003472:	4690      	mov	r8, r2
 8003474:	4699      	mov	r9, r3
 8003476:	4623      	mov	r3, r4
 8003478:	eb18 0303 	adds.w	r3, r8, r3
 800347c:	60bb      	str	r3, [r7, #8]
 800347e:	462b      	mov	r3, r5
 8003480:	eb49 0303 	adc.w	r3, r9, r3
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	f04f 0200 	mov.w	r2, #0
 800348a:	f04f 0300 	mov.w	r3, #0
 800348e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003492:	4629      	mov	r1, r5
 8003494:	024b      	lsls	r3, r1, #9
 8003496:	4621      	mov	r1, r4
 8003498:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800349c:	4621      	mov	r1, r4
 800349e:	024a      	lsls	r2, r1, #9
 80034a0:	4610      	mov	r0, r2
 80034a2:	4619      	mov	r1, r3
 80034a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034a6:	2200      	movs	r2, #0
 80034a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80034b0:	f7fd fb24 	bl	8000afc <__aeabi_uldivmod>
 80034b4:	4602      	mov	r2, r0
 80034b6:	460b      	mov	r3, r1
 80034b8:	4613      	mov	r3, r2
 80034ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034bc:	e058      	b.n	8003570 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034be:	4b38      	ldr	r3, [pc, #224]	@ (80035a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	099b      	lsrs	r3, r3, #6
 80034c4:	2200      	movs	r2, #0
 80034c6:	4618      	mov	r0, r3
 80034c8:	4611      	mov	r1, r2
 80034ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034ce:	623b      	str	r3, [r7, #32]
 80034d0:	2300      	movs	r3, #0
 80034d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80034d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034d8:	4642      	mov	r2, r8
 80034da:	464b      	mov	r3, r9
 80034dc:	f04f 0000 	mov.w	r0, #0
 80034e0:	f04f 0100 	mov.w	r1, #0
 80034e4:	0159      	lsls	r1, r3, #5
 80034e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034ea:	0150      	lsls	r0, r2, #5
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	4641      	mov	r1, r8
 80034f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80034f6:	4649      	mov	r1, r9
 80034f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80034fc:	f04f 0200 	mov.w	r2, #0
 8003500:	f04f 0300 	mov.w	r3, #0
 8003504:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003508:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800350c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003510:	ebb2 040a 	subs.w	r4, r2, sl
 8003514:	eb63 050b 	sbc.w	r5, r3, fp
 8003518:	f04f 0200 	mov.w	r2, #0
 800351c:	f04f 0300 	mov.w	r3, #0
 8003520:	00eb      	lsls	r3, r5, #3
 8003522:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003526:	00e2      	lsls	r2, r4, #3
 8003528:	4614      	mov	r4, r2
 800352a:	461d      	mov	r5, r3
 800352c:	4643      	mov	r3, r8
 800352e:	18e3      	adds	r3, r4, r3
 8003530:	603b      	str	r3, [r7, #0]
 8003532:	464b      	mov	r3, r9
 8003534:	eb45 0303 	adc.w	r3, r5, r3
 8003538:	607b      	str	r3, [r7, #4]
 800353a:	f04f 0200 	mov.w	r2, #0
 800353e:	f04f 0300 	mov.w	r3, #0
 8003542:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003546:	4629      	mov	r1, r5
 8003548:	028b      	lsls	r3, r1, #10
 800354a:	4621      	mov	r1, r4
 800354c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003550:	4621      	mov	r1, r4
 8003552:	028a      	lsls	r2, r1, #10
 8003554:	4610      	mov	r0, r2
 8003556:	4619      	mov	r1, r3
 8003558:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800355a:	2200      	movs	r2, #0
 800355c:	61bb      	str	r3, [r7, #24]
 800355e:	61fa      	str	r2, [r7, #28]
 8003560:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003564:	f7fd faca 	bl	8000afc <__aeabi_uldivmod>
 8003568:	4602      	mov	r2, r0
 800356a:	460b      	mov	r3, r1
 800356c:	4613      	mov	r3, r2
 800356e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003570:	4b0b      	ldr	r3, [pc, #44]	@ (80035a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	0c1b      	lsrs	r3, r3, #16
 8003576:	f003 0303 	and.w	r3, r3, #3
 800357a:	3301      	adds	r3, #1
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003580:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003582:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003584:	fbb2 f3f3 	udiv	r3, r2, r3
 8003588:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800358a:	e002      	b.n	8003592 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800358c:	4b05      	ldr	r3, [pc, #20]	@ (80035a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800358e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003590:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003592:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003594:	4618      	mov	r0, r3
 8003596:	3750      	adds	r7, #80	@ 0x50
 8003598:	46bd      	mov	sp, r7
 800359a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800359e:	bf00      	nop
 80035a0:	40023800 	.word	0x40023800
 80035a4:	00f42400 	.word	0x00f42400
 80035a8:	007a1200 	.word	0x007a1200

080035ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035b0:	4b03      	ldr	r3, [pc, #12]	@ (80035c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80035b2:	681b      	ldr	r3, [r3, #0]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	20000000 	.word	0x20000000

080035c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035c8:	f7ff fff0 	bl	80035ac <HAL_RCC_GetHCLKFreq>
 80035cc:	4602      	mov	r2, r0
 80035ce:	4b05      	ldr	r3, [pc, #20]	@ (80035e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	0a9b      	lsrs	r3, r3, #10
 80035d4:	f003 0307 	and.w	r3, r3, #7
 80035d8:	4903      	ldr	r1, [pc, #12]	@ (80035e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035da:	5ccb      	ldrb	r3, [r1, r3]
 80035dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	40023800 	.word	0x40023800
 80035e8:	080047c0 	.word	0x080047c0

080035ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035f0:	f7ff ffdc 	bl	80035ac <HAL_RCC_GetHCLKFreq>
 80035f4:	4602      	mov	r2, r0
 80035f6:	4b05      	ldr	r3, [pc, #20]	@ (800360c <HAL_RCC_GetPCLK2Freq+0x20>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	0b5b      	lsrs	r3, r3, #13
 80035fc:	f003 0307 	and.w	r3, r3, #7
 8003600:	4903      	ldr	r1, [pc, #12]	@ (8003610 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003602:	5ccb      	ldrb	r3, [r1, r3]
 8003604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003608:	4618      	mov	r0, r3
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40023800 	.word	0x40023800
 8003610:	080047c0 	.word	0x080047c0

08003614 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e042      	b.n	80036ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d106      	bne.n	8003640 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7fd ff54 	bl	80014e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2224      	movs	r2, #36	@ 0x24
 8003644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68da      	ldr	r2, [r3, #12]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003656:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 f973 	bl	8003944 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	691a      	ldr	r2, [r3, #16]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800366c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	695a      	ldr	r2, [r3, #20]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800367c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68da      	ldr	r2, [r3, #12]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800368c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2220      	movs	r2, #32
 8003698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2220      	movs	r2, #32
 80036a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3708      	adds	r7, #8
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b08a      	sub	sp, #40	@ 0x28
 80036b8:	af02      	add	r7, sp, #8
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	603b      	str	r3, [r7, #0]
 80036c0:	4613      	mov	r3, r2
 80036c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036c4:	2300      	movs	r3, #0
 80036c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b20      	cmp	r3, #32
 80036d2:	d175      	bne.n	80037c0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d002      	beq.n	80036e0 <HAL_UART_Transmit+0x2c>
 80036da:	88fb      	ldrh	r3, [r7, #6]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e06e      	b.n	80037c2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2221      	movs	r2, #33	@ 0x21
 80036ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036f2:	f7fe f853 	bl	800179c <HAL_GetTick>
 80036f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	88fa      	ldrh	r2, [r7, #6]
 80036fc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	88fa      	ldrh	r2, [r7, #6]
 8003702:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800370c:	d108      	bne.n	8003720 <HAL_UART_Transmit+0x6c>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d104      	bne.n	8003720 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003716:	2300      	movs	r3, #0
 8003718:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	61bb      	str	r3, [r7, #24]
 800371e:	e003      	b.n	8003728 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003724:	2300      	movs	r3, #0
 8003726:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003728:	e02e      	b.n	8003788 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	2200      	movs	r2, #0
 8003732:	2180      	movs	r1, #128	@ 0x80
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f000 f848 	bl	80037ca <UART_WaitOnFlagUntilTimeout>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d005      	beq.n	800374c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2220      	movs	r2, #32
 8003744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e03a      	b.n	80037c2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10b      	bne.n	800376a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	881b      	ldrh	r3, [r3, #0]
 8003756:	461a      	mov	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003760:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	3302      	adds	r3, #2
 8003766:	61bb      	str	r3, [r7, #24]
 8003768:	e007      	b.n	800377a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	781a      	ldrb	r2, [r3, #0]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	3301      	adds	r3, #1
 8003778:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800377e:	b29b      	uxth	r3, r3
 8003780:	3b01      	subs	r3, #1
 8003782:	b29a      	uxth	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800378c:	b29b      	uxth	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1cb      	bne.n	800372a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	2200      	movs	r2, #0
 800379a:	2140      	movs	r1, #64	@ 0x40
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f000 f814 	bl	80037ca <UART_WaitOnFlagUntilTimeout>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d005      	beq.n	80037b4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2220      	movs	r2, #32
 80037ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e006      	b.n	80037c2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80037bc:	2300      	movs	r3, #0
 80037be:	e000      	b.n	80037c2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80037c0:	2302      	movs	r3, #2
  }
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3720      	adds	r7, #32
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b086      	sub	sp, #24
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	60f8      	str	r0, [r7, #12]
 80037d2:	60b9      	str	r1, [r7, #8]
 80037d4:	603b      	str	r3, [r7, #0]
 80037d6:	4613      	mov	r3, r2
 80037d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037da:	e03b      	b.n	8003854 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037dc:	6a3b      	ldr	r3, [r7, #32]
 80037de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80037e2:	d037      	beq.n	8003854 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037e4:	f7fd ffda 	bl	800179c <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	6a3a      	ldr	r2, [r7, #32]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d302      	bcc.n	80037fa <UART_WaitOnFlagUntilTimeout+0x30>
 80037f4:	6a3b      	ldr	r3, [r7, #32]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e03a      	b.n	8003874 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	2b00      	cmp	r3, #0
 800380a:	d023      	beq.n	8003854 <UART_WaitOnFlagUntilTimeout+0x8a>
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	2b80      	cmp	r3, #128	@ 0x80
 8003810:	d020      	beq.n	8003854 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	2b40      	cmp	r3, #64	@ 0x40
 8003816:	d01d      	beq.n	8003854 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0308 	and.w	r3, r3, #8
 8003822:	2b08      	cmp	r3, #8
 8003824:	d116      	bne.n	8003854 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003826:	2300      	movs	r3, #0
 8003828:	617b      	str	r3, [r7, #20]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	617b      	str	r3, [r7, #20]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	617b      	str	r3, [r7, #20]
 800383a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f000 f81d 	bl	800387c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2208      	movs	r2, #8
 8003846:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e00f      	b.n	8003874 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	4013      	ands	r3, r2
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	429a      	cmp	r2, r3
 8003862:	bf0c      	ite	eq
 8003864:	2301      	moveq	r3, #1
 8003866:	2300      	movne	r3, #0
 8003868:	b2db      	uxtb	r3, r3
 800386a:	461a      	mov	r2, r3
 800386c:	79fb      	ldrb	r3, [r7, #7]
 800386e:	429a      	cmp	r2, r3
 8003870:	d0b4      	beq.n	80037dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3718      	adds	r7, #24
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800387c:	b480      	push	{r7}
 800387e:	b095      	sub	sp, #84	@ 0x54
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	330c      	adds	r3, #12
 800388a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800388e:	e853 3f00 	ldrex	r3, [r3]
 8003892:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003896:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800389a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	330c      	adds	r3, #12
 80038a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038a4:	643a      	str	r2, [r7, #64]	@ 0x40
 80038a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80038aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80038ac:	e841 2300 	strex	r3, r2, [r1]
 80038b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80038b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1e5      	bne.n	8003884 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	3314      	adds	r3, #20
 80038be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c0:	6a3b      	ldr	r3, [r7, #32]
 80038c2:	e853 3f00 	ldrex	r3, [r3]
 80038c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	f023 0301 	bic.w	r3, r3, #1
 80038ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	3314      	adds	r3, #20
 80038d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038e0:	e841 2300 	strex	r3, r2, [r1]
 80038e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80038e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1e5      	bne.n	80038b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d119      	bne.n	8003928 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	330c      	adds	r3, #12
 80038fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	e853 3f00 	ldrex	r3, [r3]
 8003902:	60bb      	str	r3, [r7, #8]
   return(result);
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	f023 0310 	bic.w	r3, r3, #16
 800390a:	647b      	str	r3, [r7, #68]	@ 0x44
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	330c      	adds	r3, #12
 8003912:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003914:	61ba      	str	r2, [r7, #24]
 8003916:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003918:	6979      	ldr	r1, [r7, #20]
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	e841 2300 	strex	r3, r2, [r1]
 8003920:	613b      	str	r3, [r7, #16]
   return(result);
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1e5      	bne.n	80038f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2220      	movs	r2, #32
 800392c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003936:	bf00      	nop
 8003938:	3754      	adds	r7, #84	@ 0x54
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
	...

08003944 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003948:	b0c0      	sub	sp, #256	@ 0x100
 800394a:	af00      	add	r7, sp, #0
 800394c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800395c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003960:	68d9      	ldr	r1, [r3, #12]
 8003962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	ea40 0301 	orr.w	r3, r0, r1
 800396c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800396e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	431a      	orrs	r2, r3
 800397c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	431a      	orrs	r2, r3
 8003984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	4313      	orrs	r3, r2
 800398c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800399c:	f021 010c 	bic.w	r1, r1, #12
 80039a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80039aa:	430b      	orrs	r3, r1
 80039ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80039ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039be:	6999      	ldr	r1, [r3, #24]
 80039c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	ea40 0301 	orr.w	r3, r0, r1
 80039ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	4b8f      	ldr	r3, [pc, #572]	@ (8003c10 <UART_SetConfig+0x2cc>)
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d005      	beq.n	80039e4 <UART_SetConfig+0xa0>
 80039d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	4b8d      	ldr	r3, [pc, #564]	@ (8003c14 <UART_SetConfig+0x2d0>)
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d104      	bne.n	80039ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039e4:	f7ff fe02 	bl	80035ec <HAL_RCC_GetPCLK2Freq>
 80039e8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80039ec:	e003      	b.n	80039f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039ee:	f7ff fde9 	bl	80035c4 <HAL_RCC_GetPCLK1Freq>
 80039f2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039fa:	69db      	ldr	r3, [r3, #28]
 80039fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a00:	f040 810c 	bne.w	8003c1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a0e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003a12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003a16:	4622      	mov	r2, r4
 8003a18:	462b      	mov	r3, r5
 8003a1a:	1891      	adds	r1, r2, r2
 8003a1c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003a1e:	415b      	adcs	r3, r3
 8003a20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003a26:	4621      	mov	r1, r4
 8003a28:	eb12 0801 	adds.w	r8, r2, r1
 8003a2c:	4629      	mov	r1, r5
 8003a2e:	eb43 0901 	adc.w	r9, r3, r1
 8003a32:	f04f 0200 	mov.w	r2, #0
 8003a36:	f04f 0300 	mov.w	r3, #0
 8003a3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a46:	4690      	mov	r8, r2
 8003a48:	4699      	mov	r9, r3
 8003a4a:	4623      	mov	r3, r4
 8003a4c:	eb18 0303 	adds.w	r3, r8, r3
 8003a50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003a54:	462b      	mov	r3, r5
 8003a56:	eb49 0303 	adc.w	r3, r9, r3
 8003a5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a6a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003a6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a72:	460b      	mov	r3, r1
 8003a74:	18db      	adds	r3, r3, r3
 8003a76:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a78:	4613      	mov	r3, r2
 8003a7a:	eb42 0303 	adc.w	r3, r2, r3
 8003a7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003a84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003a88:	f7fd f838 	bl	8000afc <__aeabi_uldivmod>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	460b      	mov	r3, r1
 8003a90:	4b61      	ldr	r3, [pc, #388]	@ (8003c18 <UART_SetConfig+0x2d4>)
 8003a92:	fba3 2302 	umull	r2, r3, r3, r2
 8003a96:	095b      	lsrs	r3, r3, #5
 8003a98:	011c      	lsls	r4, r3, #4
 8003a9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003aa4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003aa8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003aac:	4642      	mov	r2, r8
 8003aae:	464b      	mov	r3, r9
 8003ab0:	1891      	adds	r1, r2, r2
 8003ab2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003ab4:	415b      	adcs	r3, r3
 8003ab6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ab8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003abc:	4641      	mov	r1, r8
 8003abe:	eb12 0a01 	adds.w	sl, r2, r1
 8003ac2:	4649      	mov	r1, r9
 8003ac4:	eb43 0b01 	adc.w	fp, r3, r1
 8003ac8:	f04f 0200 	mov.w	r2, #0
 8003acc:	f04f 0300 	mov.w	r3, #0
 8003ad0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ad4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ad8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003adc:	4692      	mov	sl, r2
 8003ade:	469b      	mov	fp, r3
 8003ae0:	4643      	mov	r3, r8
 8003ae2:	eb1a 0303 	adds.w	r3, sl, r3
 8003ae6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003aea:	464b      	mov	r3, r9
 8003aec:	eb4b 0303 	adc.w	r3, fp, r3
 8003af0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b00:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003b04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b08:	460b      	mov	r3, r1
 8003b0a:	18db      	adds	r3, r3, r3
 8003b0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b0e:	4613      	mov	r3, r2
 8003b10:	eb42 0303 	adc.w	r3, r2, r3
 8003b14:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003b1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003b1e:	f7fc ffed 	bl	8000afc <__aeabi_uldivmod>
 8003b22:	4602      	mov	r2, r0
 8003b24:	460b      	mov	r3, r1
 8003b26:	4611      	mov	r1, r2
 8003b28:	4b3b      	ldr	r3, [pc, #236]	@ (8003c18 <UART_SetConfig+0x2d4>)
 8003b2a:	fba3 2301 	umull	r2, r3, r3, r1
 8003b2e:	095b      	lsrs	r3, r3, #5
 8003b30:	2264      	movs	r2, #100	@ 0x64
 8003b32:	fb02 f303 	mul.w	r3, r2, r3
 8003b36:	1acb      	subs	r3, r1, r3
 8003b38:	00db      	lsls	r3, r3, #3
 8003b3a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003b3e:	4b36      	ldr	r3, [pc, #216]	@ (8003c18 <UART_SetConfig+0x2d4>)
 8003b40:	fba3 2302 	umull	r2, r3, r3, r2
 8003b44:	095b      	lsrs	r3, r3, #5
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003b4c:	441c      	add	r4, r3
 8003b4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b52:	2200      	movs	r2, #0
 8003b54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b58:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003b5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003b60:	4642      	mov	r2, r8
 8003b62:	464b      	mov	r3, r9
 8003b64:	1891      	adds	r1, r2, r2
 8003b66:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003b68:	415b      	adcs	r3, r3
 8003b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003b70:	4641      	mov	r1, r8
 8003b72:	1851      	adds	r1, r2, r1
 8003b74:	6339      	str	r1, [r7, #48]	@ 0x30
 8003b76:	4649      	mov	r1, r9
 8003b78:	414b      	adcs	r3, r1
 8003b7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b7c:	f04f 0200 	mov.w	r2, #0
 8003b80:	f04f 0300 	mov.w	r3, #0
 8003b84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003b88:	4659      	mov	r1, fp
 8003b8a:	00cb      	lsls	r3, r1, #3
 8003b8c:	4651      	mov	r1, sl
 8003b8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b92:	4651      	mov	r1, sl
 8003b94:	00ca      	lsls	r2, r1, #3
 8003b96:	4610      	mov	r0, r2
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	4642      	mov	r2, r8
 8003b9e:	189b      	adds	r3, r3, r2
 8003ba0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ba4:	464b      	mov	r3, r9
 8003ba6:	460a      	mov	r2, r1
 8003ba8:	eb42 0303 	adc.w	r3, r2, r3
 8003bac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003bbc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003bc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	18db      	adds	r3, r3, r3
 8003bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bca:	4613      	mov	r3, r2
 8003bcc:	eb42 0303 	adc.w	r3, r2, r3
 8003bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003bd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003bda:	f7fc ff8f 	bl	8000afc <__aeabi_uldivmod>
 8003bde:	4602      	mov	r2, r0
 8003be0:	460b      	mov	r3, r1
 8003be2:	4b0d      	ldr	r3, [pc, #52]	@ (8003c18 <UART_SetConfig+0x2d4>)
 8003be4:	fba3 1302 	umull	r1, r3, r3, r2
 8003be8:	095b      	lsrs	r3, r3, #5
 8003bea:	2164      	movs	r1, #100	@ 0x64
 8003bec:	fb01 f303 	mul.w	r3, r1, r3
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	3332      	adds	r3, #50	@ 0x32
 8003bf6:	4a08      	ldr	r2, [pc, #32]	@ (8003c18 <UART_SetConfig+0x2d4>)
 8003bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfc:	095b      	lsrs	r3, r3, #5
 8003bfe:	f003 0207 	and.w	r2, r3, #7
 8003c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4422      	add	r2, r4
 8003c0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c0c:	e106      	b.n	8003e1c <UART_SetConfig+0x4d8>
 8003c0e:	bf00      	nop
 8003c10:	40011000 	.word	0x40011000
 8003c14:	40011400 	.word	0x40011400
 8003c18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c20:	2200      	movs	r2, #0
 8003c22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003c26:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003c2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003c2e:	4642      	mov	r2, r8
 8003c30:	464b      	mov	r3, r9
 8003c32:	1891      	adds	r1, r2, r2
 8003c34:	6239      	str	r1, [r7, #32]
 8003c36:	415b      	adcs	r3, r3
 8003c38:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c3e:	4641      	mov	r1, r8
 8003c40:	1854      	adds	r4, r2, r1
 8003c42:	4649      	mov	r1, r9
 8003c44:	eb43 0501 	adc.w	r5, r3, r1
 8003c48:	f04f 0200 	mov.w	r2, #0
 8003c4c:	f04f 0300 	mov.w	r3, #0
 8003c50:	00eb      	lsls	r3, r5, #3
 8003c52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c56:	00e2      	lsls	r2, r4, #3
 8003c58:	4614      	mov	r4, r2
 8003c5a:	461d      	mov	r5, r3
 8003c5c:	4643      	mov	r3, r8
 8003c5e:	18e3      	adds	r3, r4, r3
 8003c60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c64:	464b      	mov	r3, r9
 8003c66:	eb45 0303 	adc.w	r3, r5, r3
 8003c6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c7a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c7e:	f04f 0200 	mov.w	r2, #0
 8003c82:	f04f 0300 	mov.w	r3, #0
 8003c86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003c8a:	4629      	mov	r1, r5
 8003c8c:	008b      	lsls	r3, r1, #2
 8003c8e:	4621      	mov	r1, r4
 8003c90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c94:	4621      	mov	r1, r4
 8003c96:	008a      	lsls	r2, r1, #2
 8003c98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003c9c:	f7fc ff2e 	bl	8000afc <__aeabi_uldivmod>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	4b60      	ldr	r3, [pc, #384]	@ (8003e28 <UART_SetConfig+0x4e4>)
 8003ca6:	fba3 2302 	umull	r2, r3, r3, r2
 8003caa:	095b      	lsrs	r3, r3, #5
 8003cac:	011c      	lsls	r4, r3, #4
 8003cae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003cb8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003cbc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003cc0:	4642      	mov	r2, r8
 8003cc2:	464b      	mov	r3, r9
 8003cc4:	1891      	adds	r1, r2, r2
 8003cc6:	61b9      	str	r1, [r7, #24]
 8003cc8:	415b      	adcs	r3, r3
 8003cca:	61fb      	str	r3, [r7, #28]
 8003ccc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cd0:	4641      	mov	r1, r8
 8003cd2:	1851      	adds	r1, r2, r1
 8003cd4:	6139      	str	r1, [r7, #16]
 8003cd6:	4649      	mov	r1, r9
 8003cd8:	414b      	adcs	r3, r1
 8003cda:	617b      	str	r3, [r7, #20]
 8003cdc:	f04f 0200 	mov.w	r2, #0
 8003ce0:	f04f 0300 	mov.w	r3, #0
 8003ce4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ce8:	4659      	mov	r1, fp
 8003cea:	00cb      	lsls	r3, r1, #3
 8003cec:	4651      	mov	r1, sl
 8003cee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cf2:	4651      	mov	r1, sl
 8003cf4:	00ca      	lsls	r2, r1, #3
 8003cf6:	4610      	mov	r0, r2
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	4642      	mov	r2, r8
 8003cfe:	189b      	adds	r3, r3, r2
 8003d00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d04:	464b      	mov	r3, r9
 8003d06:	460a      	mov	r2, r1
 8003d08:	eb42 0303 	adc.w	r3, r2, r3
 8003d0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d1a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003d1c:	f04f 0200 	mov.w	r2, #0
 8003d20:	f04f 0300 	mov.w	r3, #0
 8003d24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003d28:	4649      	mov	r1, r9
 8003d2a:	008b      	lsls	r3, r1, #2
 8003d2c:	4641      	mov	r1, r8
 8003d2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d32:	4641      	mov	r1, r8
 8003d34:	008a      	lsls	r2, r1, #2
 8003d36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003d3a:	f7fc fedf 	bl	8000afc <__aeabi_uldivmod>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	460b      	mov	r3, r1
 8003d42:	4611      	mov	r1, r2
 8003d44:	4b38      	ldr	r3, [pc, #224]	@ (8003e28 <UART_SetConfig+0x4e4>)
 8003d46:	fba3 2301 	umull	r2, r3, r3, r1
 8003d4a:	095b      	lsrs	r3, r3, #5
 8003d4c:	2264      	movs	r2, #100	@ 0x64
 8003d4e:	fb02 f303 	mul.w	r3, r2, r3
 8003d52:	1acb      	subs	r3, r1, r3
 8003d54:	011b      	lsls	r3, r3, #4
 8003d56:	3332      	adds	r3, #50	@ 0x32
 8003d58:	4a33      	ldr	r2, [pc, #204]	@ (8003e28 <UART_SetConfig+0x4e4>)
 8003d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5e:	095b      	lsrs	r3, r3, #5
 8003d60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d64:	441c      	add	r4, r3
 8003d66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d6e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003d70:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003d74:	4642      	mov	r2, r8
 8003d76:	464b      	mov	r3, r9
 8003d78:	1891      	adds	r1, r2, r2
 8003d7a:	60b9      	str	r1, [r7, #8]
 8003d7c:	415b      	adcs	r3, r3
 8003d7e:	60fb      	str	r3, [r7, #12]
 8003d80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d84:	4641      	mov	r1, r8
 8003d86:	1851      	adds	r1, r2, r1
 8003d88:	6039      	str	r1, [r7, #0]
 8003d8a:	4649      	mov	r1, r9
 8003d8c:	414b      	adcs	r3, r1
 8003d8e:	607b      	str	r3, [r7, #4]
 8003d90:	f04f 0200 	mov.w	r2, #0
 8003d94:	f04f 0300 	mov.w	r3, #0
 8003d98:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d9c:	4659      	mov	r1, fp
 8003d9e:	00cb      	lsls	r3, r1, #3
 8003da0:	4651      	mov	r1, sl
 8003da2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003da6:	4651      	mov	r1, sl
 8003da8:	00ca      	lsls	r2, r1, #3
 8003daa:	4610      	mov	r0, r2
 8003dac:	4619      	mov	r1, r3
 8003dae:	4603      	mov	r3, r0
 8003db0:	4642      	mov	r2, r8
 8003db2:	189b      	adds	r3, r3, r2
 8003db4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003db6:	464b      	mov	r3, r9
 8003db8:	460a      	mov	r2, r1
 8003dba:	eb42 0303 	adc.w	r3, r2, r3
 8003dbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003dca:	667a      	str	r2, [r7, #100]	@ 0x64
 8003dcc:	f04f 0200 	mov.w	r2, #0
 8003dd0:	f04f 0300 	mov.w	r3, #0
 8003dd4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003dd8:	4649      	mov	r1, r9
 8003dda:	008b      	lsls	r3, r1, #2
 8003ddc:	4641      	mov	r1, r8
 8003dde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003de2:	4641      	mov	r1, r8
 8003de4:	008a      	lsls	r2, r1, #2
 8003de6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003dea:	f7fc fe87 	bl	8000afc <__aeabi_uldivmod>
 8003dee:	4602      	mov	r2, r0
 8003df0:	460b      	mov	r3, r1
 8003df2:	4b0d      	ldr	r3, [pc, #52]	@ (8003e28 <UART_SetConfig+0x4e4>)
 8003df4:	fba3 1302 	umull	r1, r3, r3, r2
 8003df8:	095b      	lsrs	r3, r3, #5
 8003dfa:	2164      	movs	r1, #100	@ 0x64
 8003dfc:	fb01 f303 	mul.w	r3, r1, r3
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	011b      	lsls	r3, r3, #4
 8003e04:	3332      	adds	r3, #50	@ 0x32
 8003e06:	4a08      	ldr	r2, [pc, #32]	@ (8003e28 <UART_SetConfig+0x4e4>)
 8003e08:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0c:	095b      	lsrs	r3, r3, #5
 8003e0e:	f003 020f 	and.w	r2, r3, #15
 8003e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4422      	add	r2, r4
 8003e1a:	609a      	str	r2, [r3, #8]
}
 8003e1c:	bf00      	nop
 8003e1e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003e22:	46bd      	mov	sp, r7
 8003e24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e28:	51eb851f 	.word	0x51eb851f

08003e2c <siprintf>:
 8003e2c:	b40e      	push	{r1, r2, r3}
 8003e2e:	b500      	push	{lr}
 8003e30:	b09c      	sub	sp, #112	@ 0x70
 8003e32:	ab1d      	add	r3, sp, #116	@ 0x74
 8003e34:	9002      	str	r0, [sp, #8]
 8003e36:	9006      	str	r0, [sp, #24]
 8003e38:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003e3c:	4809      	ldr	r0, [pc, #36]	@ (8003e64 <siprintf+0x38>)
 8003e3e:	9107      	str	r1, [sp, #28]
 8003e40:	9104      	str	r1, [sp, #16]
 8003e42:	4909      	ldr	r1, [pc, #36]	@ (8003e68 <siprintf+0x3c>)
 8003e44:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e48:	9105      	str	r1, [sp, #20]
 8003e4a:	6800      	ldr	r0, [r0, #0]
 8003e4c:	9301      	str	r3, [sp, #4]
 8003e4e:	a902      	add	r1, sp, #8
 8003e50:	f000 f994 	bl	800417c <_svfiprintf_r>
 8003e54:	9b02      	ldr	r3, [sp, #8]
 8003e56:	2200      	movs	r2, #0
 8003e58:	701a      	strb	r2, [r3, #0]
 8003e5a:	b01c      	add	sp, #112	@ 0x70
 8003e5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e60:	b003      	add	sp, #12
 8003e62:	4770      	bx	lr
 8003e64:	2000000c 	.word	0x2000000c
 8003e68:	ffff0208 	.word	0xffff0208

08003e6c <memset>:
 8003e6c:	4402      	add	r2, r0
 8003e6e:	4603      	mov	r3, r0
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d100      	bne.n	8003e76 <memset+0xa>
 8003e74:	4770      	bx	lr
 8003e76:	f803 1b01 	strb.w	r1, [r3], #1
 8003e7a:	e7f9      	b.n	8003e70 <memset+0x4>

08003e7c <__errno>:
 8003e7c:	4b01      	ldr	r3, [pc, #4]	@ (8003e84 <__errno+0x8>)
 8003e7e:	6818      	ldr	r0, [r3, #0]
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	2000000c 	.word	0x2000000c

08003e88 <__libc_init_array>:
 8003e88:	b570      	push	{r4, r5, r6, lr}
 8003e8a:	4d0d      	ldr	r5, [pc, #52]	@ (8003ec0 <__libc_init_array+0x38>)
 8003e8c:	4c0d      	ldr	r4, [pc, #52]	@ (8003ec4 <__libc_init_array+0x3c>)
 8003e8e:	1b64      	subs	r4, r4, r5
 8003e90:	10a4      	asrs	r4, r4, #2
 8003e92:	2600      	movs	r6, #0
 8003e94:	42a6      	cmp	r6, r4
 8003e96:	d109      	bne.n	8003eac <__libc_init_array+0x24>
 8003e98:	4d0b      	ldr	r5, [pc, #44]	@ (8003ec8 <__libc_init_array+0x40>)
 8003e9a:	4c0c      	ldr	r4, [pc, #48]	@ (8003ecc <__libc_init_array+0x44>)
 8003e9c:	f000 fc66 	bl	800476c <_init>
 8003ea0:	1b64      	subs	r4, r4, r5
 8003ea2:	10a4      	asrs	r4, r4, #2
 8003ea4:	2600      	movs	r6, #0
 8003ea6:	42a6      	cmp	r6, r4
 8003ea8:	d105      	bne.n	8003eb6 <__libc_init_array+0x2e>
 8003eaa:	bd70      	pop	{r4, r5, r6, pc}
 8003eac:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eb0:	4798      	blx	r3
 8003eb2:	3601      	adds	r6, #1
 8003eb4:	e7ee      	b.n	8003e94 <__libc_init_array+0xc>
 8003eb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eba:	4798      	blx	r3
 8003ebc:	3601      	adds	r6, #1
 8003ebe:	e7f2      	b.n	8003ea6 <__libc_init_array+0x1e>
 8003ec0:	08004804 	.word	0x08004804
 8003ec4:	08004804 	.word	0x08004804
 8003ec8:	08004804 	.word	0x08004804
 8003ecc:	08004808 	.word	0x08004808

08003ed0 <__retarget_lock_acquire_recursive>:
 8003ed0:	4770      	bx	lr

08003ed2 <__retarget_lock_release_recursive>:
 8003ed2:	4770      	bx	lr

08003ed4 <_free_r>:
 8003ed4:	b538      	push	{r3, r4, r5, lr}
 8003ed6:	4605      	mov	r5, r0
 8003ed8:	2900      	cmp	r1, #0
 8003eda:	d041      	beq.n	8003f60 <_free_r+0x8c>
 8003edc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ee0:	1f0c      	subs	r4, r1, #4
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	bfb8      	it	lt
 8003ee6:	18e4      	addlt	r4, r4, r3
 8003ee8:	f000 f8e0 	bl	80040ac <__malloc_lock>
 8003eec:	4a1d      	ldr	r2, [pc, #116]	@ (8003f64 <_free_r+0x90>)
 8003eee:	6813      	ldr	r3, [r2, #0]
 8003ef0:	b933      	cbnz	r3, 8003f00 <_free_r+0x2c>
 8003ef2:	6063      	str	r3, [r4, #4]
 8003ef4:	6014      	str	r4, [r2, #0]
 8003ef6:	4628      	mov	r0, r5
 8003ef8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003efc:	f000 b8dc 	b.w	80040b8 <__malloc_unlock>
 8003f00:	42a3      	cmp	r3, r4
 8003f02:	d908      	bls.n	8003f16 <_free_r+0x42>
 8003f04:	6820      	ldr	r0, [r4, #0]
 8003f06:	1821      	adds	r1, r4, r0
 8003f08:	428b      	cmp	r3, r1
 8003f0a:	bf01      	itttt	eq
 8003f0c:	6819      	ldreq	r1, [r3, #0]
 8003f0e:	685b      	ldreq	r3, [r3, #4]
 8003f10:	1809      	addeq	r1, r1, r0
 8003f12:	6021      	streq	r1, [r4, #0]
 8003f14:	e7ed      	b.n	8003ef2 <_free_r+0x1e>
 8003f16:	461a      	mov	r2, r3
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	b10b      	cbz	r3, 8003f20 <_free_r+0x4c>
 8003f1c:	42a3      	cmp	r3, r4
 8003f1e:	d9fa      	bls.n	8003f16 <_free_r+0x42>
 8003f20:	6811      	ldr	r1, [r2, #0]
 8003f22:	1850      	adds	r0, r2, r1
 8003f24:	42a0      	cmp	r0, r4
 8003f26:	d10b      	bne.n	8003f40 <_free_r+0x6c>
 8003f28:	6820      	ldr	r0, [r4, #0]
 8003f2a:	4401      	add	r1, r0
 8003f2c:	1850      	adds	r0, r2, r1
 8003f2e:	4283      	cmp	r3, r0
 8003f30:	6011      	str	r1, [r2, #0]
 8003f32:	d1e0      	bne.n	8003ef6 <_free_r+0x22>
 8003f34:	6818      	ldr	r0, [r3, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	6053      	str	r3, [r2, #4]
 8003f3a:	4408      	add	r0, r1
 8003f3c:	6010      	str	r0, [r2, #0]
 8003f3e:	e7da      	b.n	8003ef6 <_free_r+0x22>
 8003f40:	d902      	bls.n	8003f48 <_free_r+0x74>
 8003f42:	230c      	movs	r3, #12
 8003f44:	602b      	str	r3, [r5, #0]
 8003f46:	e7d6      	b.n	8003ef6 <_free_r+0x22>
 8003f48:	6820      	ldr	r0, [r4, #0]
 8003f4a:	1821      	adds	r1, r4, r0
 8003f4c:	428b      	cmp	r3, r1
 8003f4e:	bf04      	itt	eq
 8003f50:	6819      	ldreq	r1, [r3, #0]
 8003f52:	685b      	ldreq	r3, [r3, #4]
 8003f54:	6063      	str	r3, [r4, #4]
 8003f56:	bf04      	itt	eq
 8003f58:	1809      	addeq	r1, r1, r0
 8003f5a:	6021      	streq	r1, [r4, #0]
 8003f5c:	6054      	str	r4, [r2, #4]
 8003f5e:	e7ca      	b.n	8003ef6 <_free_r+0x22>
 8003f60:	bd38      	pop	{r3, r4, r5, pc}
 8003f62:	bf00      	nop
 8003f64:	200002e8 	.word	0x200002e8

08003f68 <sbrk_aligned>:
 8003f68:	b570      	push	{r4, r5, r6, lr}
 8003f6a:	4e0f      	ldr	r6, [pc, #60]	@ (8003fa8 <sbrk_aligned+0x40>)
 8003f6c:	460c      	mov	r4, r1
 8003f6e:	6831      	ldr	r1, [r6, #0]
 8003f70:	4605      	mov	r5, r0
 8003f72:	b911      	cbnz	r1, 8003f7a <sbrk_aligned+0x12>
 8003f74:	f000 fba6 	bl	80046c4 <_sbrk_r>
 8003f78:	6030      	str	r0, [r6, #0]
 8003f7a:	4621      	mov	r1, r4
 8003f7c:	4628      	mov	r0, r5
 8003f7e:	f000 fba1 	bl	80046c4 <_sbrk_r>
 8003f82:	1c43      	adds	r3, r0, #1
 8003f84:	d103      	bne.n	8003f8e <sbrk_aligned+0x26>
 8003f86:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003f8a:	4620      	mov	r0, r4
 8003f8c:	bd70      	pop	{r4, r5, r6, pc}
 8003f8e:	1cc4      	adds	r4, r0, #3
 8003f90:	f024 0403 	bic.w	r4, r4, #3
 8003f94:	42a0      	cmp	r0, r4
 8003f96:	d0f8      	beq.n	8003f8a <sbrk_aligned+0x22>
 8003f98:	1a21      	subs	r1, r4, r0
 8003f9a:	4628      	mov	r0, r5
 8003f9c:	f000 fb92 	bl	80046c4 <_sbrk_r>
 8003fa0:	3001      	adds	r0, #1
 8003fa2:	d1f2      	bne.n	8003f8a <sbrk_aligned+0x22>
 8003fa4:	e7ef      	b.n	8003f86 <sbrk_aligned+0x1e>
 8003fa6:	bf00      	nop
 8003fa8:	200002e4 	.word	0x200002e4

08003fac <_malloc_r>:
 8003fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fb0:	1ccd      	adds	r5, r1, #3
 8003fb2:	f025 0503 	bic.w	r5, r5, #3
 8003fb6:	3508      	adds	r5, #8
 8003fb8:	2d0c      	cmp	r5, #12
 8003fba:	bf38      	it	cc
 8003fbc:	250c      	movcc	r5, #12
 8003fbe:	2d00      	cmp	r5, #0
 8003fc0:	4606      	mov	r6, r0
 8003fc2:	db01      	blt.n	8003fc8 <_malloc_r+0x1c>
 8003fc4:	42a9      	cmp	r1, r5
 8003fc6:	d904      	bls.n	8003fd2 <_malloc_r+0x26>
 8003fc8:	230c      	movs	r3, #12
 8003fca:	6033      	str	r3, [r6, #0]
 8003fcc:	2000      	movs	r0, #0
 8003fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fd2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80040a8 <_malloc_r+0xfc>
 8003fd6:	f000 f869 	bl	80040ac <__malloc_lock>
 8003fda:	f8d8 3000 	ldr.w	r3, [r8]
 8003fde:	461c      	mov	r4, r3
 8003fe0:	bb44      	cbnz	r4, 8004034 <_malloc_r+0x88>
 8003fe2:	4629      	mov	r1, r5
 8003fe4:	4630      	mov	r0, r6
 8003fe6:	f7ff ffbf 	bl	8003f68 <sbrk_aligned>
 8003fea:	1c43      	adds	r3, r0, #1
 8003fec:	4604      	mov	r4, r0
 8003fee:	d158      	bne.n	80040a2 <_malloc_r+0xf6>
 8003ff0:	f8d8 4000 	ldr.w	r4, [r8]
 8003ff4:	4627      	mov	r7, r4
 8003ff6:	2f00      	cmp	r7, #0
 8003ff8:	d143      	bne.n	8004082 <_malloc_r+0xd6>
 8003ffa:	2c00      	cmp	r4, #0
 8003ffc:	d04b      	beq.n	8004096 <_malloc_r+0xea>
 8003ffe:	6823      	ldr	r3, [r4, #0]
 8004000:	4639      	mov	r1, r7
 8004002:	4630      	mov	r0, r6
 8004004:	eb04 0903 	add.w	r9, r4, r3
 8004008:	f000 fb5c 	bl	80046c4 <_sbrk_r>
 800400c:	4581      	cmp	r9, r0
 800400e:	d142      	bne.n	8004096 <_malloc_r+0xea>
 8004010:	6821      	ldr	r1, [r4, #0]
 8004012:	1a6d      	subs	r5, r5, r1
 8004014:	4629      	mov	r1, r5
 8004016:	4630      	mov	r0, r6
 8004018:	f7ff ffa6 	bl	8003f68 <sbrk_aligned>
 800401c:	3001      	adds	r0, #1
 800401e:	d03a      	beq.n	8004096 <_malloc_r+0xea>
 8004020:	6823      	ldr	r3, [r4, #0]
 8004022:	442b      	add	r3, r5
 8004024:	6023      	str	r3, [r4, #0]
 8004026:	f8d8 3000 	ldr.w	r3, [r8]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	bb62      	cbnz	r2, 8004088 <_malloc_r+0xdc>
 800402e:	f8c8 7000 	str.w	r7, [r8]
 8004032:	e00f      	b.n	8004054 <_malloc_r+0xa8>
 8004034:	6822      	ldr	r2, [r4, #0]
 8004036:	1b52      	subs	r2, r2, r5
 8004038:	d420      	bmi.n	800407c <_malloc_r+0xd0>
 800403a:	2a0b      	cmp	r2, #11
 800403c:	d917      	bls.n	800406e <_malloc_r+0xc2>
 800403e:	1961      	adds	r1, r4, r5
 8004040:	42a3      	cmp	r3, r4
 8004042:	6025      	str	r5, [r4, #0]
 8004044:	bf18      	it	ne
 8004046:	6059      	strne	r1, [r3, #4]
 8004048:	6863      	ldr	r3, [r4, #4]
 800404a:	bf08      	it	eq
 800404c:	f8c8 1000 	streq.w	r1, [r8]
 8004050:	5162      	str	r2, [r4, r5]
 8004052:	604b      	str	r3, [r1, #4]
 8004054:	4630      	mov	r0, r6
 8004056:	f000 f82f 	bl	80040b8 <__malloc_unlock>
 800405a:	f104 000b 	add.w	r0, r4, #11
 800405e:	1d23      	adds	r3, r4, #4
 8004060:	f020 0007 	bic.w	r0, r0, #7
 8004064:	1ac2      	subs	r2, r0, r3
 8004066:	bf1c      	itt	ne
 8004068:	1a1b      	subne	r3, r3, r0
 800406a:	50a3      	strne	r3, [r4, r2]
 800406c:	e7af      	b.n	8003fce <_malloc_r+0x22>
 800406e:	6862      	ldr	r2, [r4, #4]
 8004070:	42a3      	cmp	r3, r4
 8004072:	bf0c      	ite	eq
 8004074:	f8c8 2000 	streq.w	r2, [r8]
 8004078:	605a      	strne	r2, [r3, #4]
 800407a:	e7eb      	b.n	8004054 <_malloc_r+0xa8>
 800407c:	4623      	mov	r3, r4
 800407e:	6864      	ldr	r4, [r4, #4]
 8004080:	e7ae      	b.n	8003fe0 <_malloc_r+0x34>
 8004082:	463c      	mov	r4, r7
 8004084:	687f      	ldr	r7, [r7, #4]
 8004086:	e7b6      	b.n	8003ff6 <_malloc_r+0x4a>
 8004088:	461a      	mov	r2, r3
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	42a3      	cmp	r3, r4
 800408e:	d1fb      	bne.n	8004088 <_malloc_r+0xdc>
 8004090:	2300      	movs	r3, #0
 8004092:	6053      	str	r3, [r2, #4]
 8004094:	e7de      	b.n	8004054 <_malloc_r+0xa8>
 8004096:	230c      	movs	r3, #12
 8004098:	6033      	str	r3, [r6, #0]
 800409a:	4630      	mov	r0, r6
 800409c:	f000 f80c 	bl	80040b8 <__malloc_unlock>
 80040a0:	e794      	b.n	8003fcc <_malloc_r+0x20>
 80040a2:	6005      	str	r5, [r0, #0]
 80040a4:	e7d6      	b.n	8004054 <_malloc_r+0xa8>
 80040a6:	bf00      	nop
 80040a8:	200002e8 	.word	0x200002e8

080040ac <__malloc_lock>:
 80040ac:	4801      	ldr	r0, [pc, #4]	@ (80040b4 <__malloc_lock+0x8>)
 80040ae:	f7ff bf0f 	b.w	8003ed0 <__retarget_lock_acquire_recursive>
 80040b2:	bf00      	nop
 80040b4:	200002e0 	.word	0x200002e0

080040b8 <__malloc_unlock>:
 80040b8:	4801      	ldr	r0, [pc, #4]	@ (80040c0 <__malloc_unlock+0x8>)
 80040ba:	f7ff bf0a 	b.w	8003ed2 <__retarget_lock_release_recursive>
 80040be:	bf00      	nop
 80040c0:	200002e0 	.word	0x200002e0

080040c4 <__ssputs_r>:
 80040c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040c8:	688e      	ldr	r6, [r1, #8]
 80040ca:	461f      	mov	r7, r3
 80040cc:	42be      	cmp	r6, r7
 80040ce:	680b      	ldr	r3, [r1, #0]
 80040d0:	4682      	mov	sl, r0
 80040d2:	460c      	mov	r4, r1
 80040d4:	4690      	mov	r8, r2
 80040d6:	d82d      	bhi.n	8004134 <__ssputs_r+0x70>
 80040d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80040dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80040e0:	d026      	beq.n	8004130 <__ssputs_r+0x6c>
 80040e2:	6965      	ldr	r5, [r4, #20]
 80040e4:	6909      	ldr	r1, [r1, #16]
 80040e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80040ea:	eba3 0901 	sub.w	r9, r3, r1
 80040ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80040f2:	1c7b      	adds	r3, r7, #1
 80040f4:	444b      	add	r3, r9
 80040f6:	106d      	asrs	r5, r5, #1
 80040f8:	429d      	cmp	r5, r3
 80040fa:	bf38      	it	cc
 80040fc:	461d      	movcc	r5, r3
 80040fe:	0553      	lsls	r3, r2, #21
 8004100:	d527      	bpl.n	8004152 <__ssputs_r+0x8e>
 8004102:	4629      	mov	r1, r5
 8004104:	f7ff ff52 	bl	8003fac <_malloc_r>
 8004108:	4606      	mov	r6, r0
 800410a:	b360      	cbz	r0, 8004166 <__ssputs_r+0xa2>
 800410c:	6921      	ldr	r1, [r4, #16]
 800410e:	464a      	mov	r2, r9
 8004110:	f000 fae8 	bl	80046e4 <memcpy>
 8004114:	89a3      	ldrh	r3, [r4, #12]
 8004116:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800411a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800411e:	81a3      	strh	r3, [r4, #12]
 8004120:	6126      	str	r6, [r4, #16]
 8004122:	6165      	str	r5, [r4, #20]
 8004124:	444e      	add	r6, r9
 8004126:	eba5 0509 	sub.w	r5, r5, r9
 800412a:	6026      	str	r6, [r4, #0]
 800412c:	60a5      	str	r5, [r4, #8]
 800412e:	463e      	mov	r6, r7
 8004130:	42be      	cmp	r6, r7
 8004132:	d900      	bls.n	8004136 <__ssputs_r+0x72>
 8004134:	463e      	mov	r6, r7
 8004136:	6820      	ldr	r0, [r4, #0]
 8004138:	4632      	mov	r2, r6
 800413a:	4641      	mov	r1, r8
 800413c:	f000 faa8 	bl	8004690 <memmove>
 8004140:	68a3      	ldr	r3, [r4, #8]
 8004142:	1b9b      	subs	r3, r3, r6
 8004144:	60a3      	str	r3, [r4, #8]
 8004146:	6823      	ldr	r3, [r4, #0]
 8004148:	4433      	add	r3, r6
 800414a:	6023      	str	r3, [r4, #0]
 800414c:	2000      	movs	r0, #0
 800414e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004152:	462a      	mov	r2, r5
 8004154:	f000 fad4 	bl	8004700 <_realloc_r>
 8004158:	4606      	mov	r6, r0
 800415a:	2800      	cmp	r0, #0
 800415c:	d1e0      	bne.n	8004120 <__ssputs_r+0x5c>
 800415e:	6921      	ldr	r1, [r4, #16]
 8004160:	4650      	mov	r0, sl
 8004162:	f7ff feb7 	bl	8003ed4 <_free_r>
 8004166:	230c      	movs	r3, #12
 8004168:	f8ca 3000 	str.w	r3, [sl]
 800416c:	89a3      	ldrh	r3, [r4, #12]
 800416e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004172:	81a3      	strh	r3, [r4, #12]
 8004174:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004178:	e7e9      	b.n	800414e <__ssputs_r+0x8a>
	...

0800417c <_svfiprintf_r>:
 800417c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004180:	4698      	mov	r8, r3
 8004182:	898b      	ldrh	r3, [r1, #12]
 8004184:	061b      	lsls	r3, r3, #24
 8004186:	b09d      	sub	sp, #116	@ 0x74
 8004188:	4607      	mov	r7, r0
 800418a:	460d      	mov	r5, r1
 800418c:	4614      	mov	r4, r2
 800418e:	d510      	bpl.n	80041b2 <_svfiprintf_r+0x36>
 8004190:	690b      	ldr	r3, [r1, #16]
 8004192:	b973      	cbnz	r3, 80041b2 <_svfiprintf_r+0x36>
 8004194:	2140      	movs	r1, #64	@ 0x40
 8004196:	f7ff ff09 	bl	8003fac <_malloc_r>
 800419a:	6028      	str	r0, [r5, #0]
 800419c:	6128      	str	r0, [r5, #16]
 800419e:	b930      	cbnz	r0, 80041ae <_svfiprintf_r+0x32>
 80041a0:	230c      	movs	r3, #12
 80041a2:	603b      	str	r3, [r7, #0]
 80041a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80041a8:	b01d      	add	sp, #116	@ 0x74
 80041aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041ae:	2340      	movs	r3, #64	@ 0x40
 80041b0:	616b      	str	r3, [r5, #20]
 80041b2:	2300      	movs	r3, #0
 80041b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80041b6:	2320      	movs	r3, #32
 80041b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80041bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80041c0:	2330      	movs	r3, #48	@ 0x30
 80041c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004360 <_svfiprintf_r+0x1e4>
 80041c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80041ca:	f04f 0901 	mov.w	r9, #1
 80041ce:	4623      	mov	r3, r4
 80041d0:	469a      	mov	sl, r3
 80041d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041d6:	b10a      	cbz	r2, 80041dc <_svfiprintf_r+0x60>
 80041d8:	2a25      	cmp	r2, #37	@ 0x25
 80041da:	d1f9      	bne.n	80041d0 <_svfiprintf_r+0x54>
 80041dc:	ebba 0b04 	subs.w	fp, sl, r4
 80041e0:	d00b      	beq.n	80041fa <_svfiprintf_r+0x7e>
 80041e2:	465b      	mov	r3, fp
 80041e4:	4622      	mov	r2, r4
 80041e6:	4629      	mov	r1, r5
 80041e8:	4638      	mov	r0, r7
 80041ea:	f7ff ff6b 	bl	80040c4 <__ssputs_r>
 80041ee:	3001      	adds	r0, #1
 80041f0:	f000 80a7 	beq.w	8004342 <_svfiprintf_r+0x1c6>
 80041f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80041f6:	445a      	add	r2, fp
 80041f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80041fa:	f89a 3000 	ldrb.w	r3, [sl]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f000 809f 	beq.w	8004342 <_svfiprintf_r+0x1c6>
 8004204:	2300      	movs	r3, #0
 8004206:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800420a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800420e:	f10a 0a01 	add.w	sl, sl, #1
 8004212:	9304      	str	r3, [sp, #16]
 8004214:	9307      	str	r3, [sp, #28]
 8004216:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800421a:	931a      	str	r3, [sp, #104]	@ 0x68
 800421c:	4654      	mov	r4, sl
 800421e:	2205      	movs	r2, #5
 8004220:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004224:	484e      	ldr	r0, [pc, #312]	@ (8004360 <_svfiprintf_r+0x1e4>)
 8004226:	f7fb ffdb 	bl	80001e0 <memchr>
 800422a:	9a04      	ldr	r2, [sp, #16]
 800422c:	b9d8      	cbnz	r0, 8004266 <_svfiprintf_r+0xea>
 800422e:	06d0      	lsls	r0, r2, #27
 8004230:	bf44      	itt	mi
 8004232:	2320      	movmi	r3, #32
 8004234:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004238:	0711      	lsls	r1, r2, #28
 800423a:	bf44      	itt	mi
 800423c:	232b      	movmi	r3, #43	@ 0x2b
 800423e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004242:	f89a 3000 	ldrb.w	r3, [sl]
 8004246:	2b2a      	cmp	r3, #42	@ 0x2a
 8004248:	d015      	beq.n	8004276 <_svfiprintf_r+0xfa>
 800424a:	9a07      	ldr	r2, [sp, #28]
 800424c:	4654      	mov	r4, sl
 800424e:	2000      	movs	r0, #0
 8004250:	f04f 0c0a 	mov.w	ip, #10
 8004254:	4621      	mov	r1, r4
 8004256:	f811 3b01 	ldrb.w	r3, [r1], #1
 800425a:	3b30      	subs	r3, #48	@ 0x30
 800425c:	2b09      	cmp	r3, #9
 800425e:	d94b      	bls.n	80042f8 <_svfiprintf_r+0x17c>
 8004260:	b1b0      	cbz	r0, 8004290 <_svfiprintf_r+0x114>
 8004262:	9207      	str	r2, [sp, #28]
 8004264:	e014      	b.n	8004290 <_svfiprintf_r+0x114>
 8004266:	eba0 0308 	sub.w	r3, r0, r8
 800426a:	fa09 f303 	lsl.w	r3, r9, r3
 800426e:	4313      	orrs	r3, r2
 8004270:	9304      	str	r3, [sp, #16]
 8004272:	46a2      	mov	sl, r4
 8004274:	e7d2      	b.n	800421c <_svfiprintf_r+0xa0>
 8004276:	9b03      	ldr	r3, [sp, #12]
 8004278:	1d19      	adds	r1, r3, #4
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	9103      	str	r1, [sp, #12]
 800427e:	2b00      	cmp	r3, #0
 8004280:	bfbb      	ittet	lt
 8004282:	425b      	neglt	r3, r3
 8004284:	f042 0202 	orrlt.w	r2, r2, #2
 8004288:	9307      	strge	r3, [sp, #28]
 800428a:	9307      	strlt	r3, [sp, #28]
 800428c:	bfb8      	it	lt
 800428e:	9204      	strlt	r2, [sp, #16]
 8004290:	7823      	ldrb	r3, [r4, #0]
 8004292:	2b2e      	cmp	r3, #46	@ 0x2e
 8004294:	d10a      	bne.n	80042ac <_svfiprintf_r+0x130>
 8004296:	7863      	ldrb	r3, [r4, #1]
 8004298:	2b2a      	cmp	r3, #42	@ 0x2a
 800429a:	d132      	bne.n	8004302 <_svfiprintf_r+0x186>
 800429c:	9b03      	ldr	r3, [sp, #12]
 800429e:	1d1a      	adds	r2, r3, #4
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	9203      	str	r2, [sp, #12]
 80042a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80042a8:	3402      	adds	r4, #2
 80042aa:	9305      	str	r3, [sp, #20]
 80042ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004370 <_svfiprintf_r+0x1f4>
 80042b0:	7821      	ldrb	r1, [r4, #0]
 80042b2:	2203      	movs	r2, #3
 80042b4:	4650      	mov	r0, sl
 80042b6:	f7fb ff93 	bl	80001e0 <memchr>
 80042ba:	b138      	cbz	r0, 80042cc <_svfiprintf_r+0x150>
 80042bc:	9b04      	ldr	r3, [sp, #16]
 80042be:	eba0 000a 	sub.w	r0, r0, sl
 80042c2:	2240      	movs	r2, #64	@ 0x40
 80042c4:	4082      	lsls	r2, r0
 80042c6:	4313      	orrs	r3, r2
 80042c8:	3401      	adds	r4, #1
 80042ca:	9304      	str	r3, [sp, #16]
 80042cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042d0:	4824      	ldr	r0, [pc, #144]	@ (8004364 <_svfiprintf_r+0x1e8>)
 80042d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80042d6:	2206      	movs	r2, #6
 80042d8:	f7fb ff82 	bl	80001e0 <memchr>
 80042dc:	2800      	cmp	r0, #0
 80042de:	d036      	beq.n	800434e <_svfiprintf_r+0x1d2>
 80042e0:	4b21      	ldr	r3, [pc, #132]	@ (8004368 <_svfiprintf_r+0x1ec>)
 80042e2:	bb1b      	cbnz	r3, 800432c <_svfiprintf_r+0x1b0>
 80042e4:	9b03      	ldr	r3, [sp, #12]
 80042e6:	3307      	adds	r3, #7
 80042e8:	f023 0307 	bic.w	r3, r3, #7
 80042ec:	3308      	adds	r3, #8
 80042ee:	9303      	str	r3, [sp, #12]
 80042f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042f2:	4433      	add	r3, r6
 80042f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80042f6:	e76a      	b.n	80041ce <_svfiprintf_r+0x52>
 80042f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80042fc:	460c      	mov	r4, r1
 80042fe:	2001      	movs	r0, #1
 8004300:	e7a8      	b.n	8004254 <_svfiprintf_r+0xd8>
 8004302:	2300      	movs	r3, #0
 8004304:	3401      	adds	r4, #1
 8004306:	9305      	str	r3, [sp, #20]
 8004308:	4619      	mov	r1, r3
 800430a:	f04f 0c0a 	mov.w	ip, #10
 800430e:	4620      	mov	r0, r4
 8004310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004314:	3a30      	subs	r2, #48	@ 0x30
 8004316:	2a09      	cmp	r2, #9
 8004318:	d903      	bls.n	8004322 <_svfiprintf_r+0x1a6>
 800431a:	2b00      	cmp	r3, #0
 800431c:	d0c6      	beq.n	80042ac <_svfiprintf_r+0x130>
 800431e:	9105      	str	r1, [sp, #20]
 8004320:	e7c4      	b.n	80042ac <_svfiprintf_r+0x130>
 8004322:	fb0c 2101 	mla	r1, ip, r1, r2
 8004326:	4604      	mov	r4, r0
 8004328:	2301      	movs	r3, #1
 800432a:	e7f0      	b.n	800430e <_svfiprintf_r+0x192>
 800432c:	ab03      	add	r3, sp, #12
 800432e:	9300      	str	r3, [sp, #0]
 8004330:	462a      	mov	r2, r5
 8004332:	4b0e      	ldr	r3, [pc, #56]	@ (800436c <_svfiprintf_r+0x1f0>)
 8004334:	a904      	add	r1, sp, #16
 8004336:	4638      	mov	r0, r7
 8004338:	f3af 8000 	nop.w
 800433c:	1c42      	adds	r2, r0, #1
 800433e:	4606      	mov	r6, r0
 8004340:	d1d6      	bne.n	80042f0 <_svfiprintf_r+0x174>
 8004342:	89ab      	ldrh	r3, [r5, #12]
 8004344:	065b      	lsls	r3, r3, #25
 8004346:	f53f af2d 	bmi.w	80041a4 <_svfiprintf_r+0x28>
 800434a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800434c:	e72c      	b.n	80041a8 <_svfiprintf_r+0x2c>
 800434e:	ab03      	add	r3, sp, #12
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	462a      	mov	r2, r5
 8004354:	4b05      	ldr	r3, [pc, #20]	@ (800436c <_svfiprintf_r+0x1f0>)
 8004356:	a904      	add	r1, sp, #16
 8004358:	4638      	mov	r0, r7
 800435a:	f000 f879 	bl	8004450 <_printf_i>
 800435e:	e7ed      	b.n	800433c <_svfiprintf_r+0x1c0>
 8004360:	080047c8 	.word	0x080047c8
 8004364:	080047d2 	.word	0x080047d2
 8004368:	00000000 	.word	0x00000000
 800436c:	080040c5 	.word	0x080040c5
 8004370:	080047ce 	.word	0x080047ce

08004374 <_printf_common>:
 8004374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004378:	4616      	mov	r6, r2
 800437a:	4698      	mov	r8, r3
 800437c:	688a      	ldr	r2, [r1, #8]
 800437e:	690b      	ldr	r3, [r1, #16]
 8004380:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004384:	4293      	cmp	r3, r2
 8004386:	bfb8      	it	lt
 8004388:	4613      	movlt	r3, r2
 800438a:	6033      	str	r3, [r6, #0]
 800438c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004390:	4607      	mov	r7, r0
 8004392:	460c      	mov	r4, r1
 8004394:	b10a      	cbz	r2, 800439a <_printf_common+0x26>
 8004396:	3301      	adds	r3, #1
 8004398:	6033      	str	r3, [r6, #0]
 800439a:	6823      	ldr	r3, [r4, #0]
 800439c:	0699      	lsls	r1, r3, #26
 800439e:	bf42      	ittt	mi
 80043a0:	6833      	ldrmi	r3, [r6, #0]
 80043a2:	3302      	addmi	r3, #2
 80043a4:	6033      	strmi	r3, [r6, #0]
 80043a6:	6825      	ldr	r5, [r4, #0]
 80043a8:	f015 0506 	ands.w	r5, r5, #6
 80043ac:	d106      	bne.n	80043bc <_printf_common+0x48>
 80043ae:	f104 0a19 	add.w	sl, r4, #25
 80043b2:	68e3      	ldr	r3, [r4, #12]
 80043b4:	6832      	ldr	r2, [r6, #0]
 80043b6:	1a9b      	subs	r3, r3, r2
 80043b8:	42ab      	cmp	r3, r5
 80043ba:	dc26      	bgt.n	800440a <_printf_common+0x96>
 80043bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80043c0:	6822      	ldr	r2, [r4, #0]
 80043c2:	3b00      	subs	r3, #0
 80043c4:	bf18      	it	ne
 80043c6:	2301      	movne	r3, #1
 80043c8:	0692      	lsls	r2, r2, #26
 80043ca:	d42b      	bmi.n	8004424 <_printf_common+0xb0>
 80043cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80043d0:	4641      	mov	r1, r8
 80043d2:	4638      	mov	r0, r7
 80043d4:	47c8      	blx	r9
 80043d6:	3001      	adds	r0, #1
 80043d8:	d01e      	beq.n	8004418 <_printf_common+0xa4>
 80043da:	6823      	ldr	r3, [r4, #0]
 80043dc:	6922      	ldr	r2, [r4, #16]
 80043de:	f003 0306 	and.w	r3, r3, #6
 80043e2:	2b04      	cmp	r3, #4
 80043e4:	bf02      	ittt	eq
 80043e6:	68e5      	ldreq	r5, [r4, #12]
 80043e8:	6833      	ldreq	r3, [r6, #0]
 80043ea:	1aed      	subeq	r5, r5, r3
 80043ec:	68a3      	ldr	r3, [r4, #8]
 80043ee:	bf0c      	ite	eq
 80043f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043f4:	2500      	movne	r5, #0
 80043f6:	4293      	cmp	r3, r2
 80043f8:	bfc4      	itt	gt
 80043fa:	1a9b      	subgt	r3, r3, r2
 80043fc:	18ed      	addgt	r5, r5, r3
 80043fe:	2600      	movs	r6, #0
 8004400:	341a      	adds	r4, #26
 8004402:	42b5      	cmp	r5, r6
 8004404:	d11a      	bne.n	800443c <_printf_common+0xc8>
 8004406:	2000      	movs	r0, #0
 8004408:	e008      	b.n	800441c <_printf_common+0xa8>
 800440a:	2301      	movs	r3, #1
 800440c:	4652      	mov	r2, sl
 800440e:	4641      	mov	r1, r8
 8004410:	4638      	mov	r0, r7
 8004412:	47c8      	blx	r9
 8004414:	3001      	adds	r0, #1
 8004416:	d103      	bne.n	8004420 <_printf_common+0xac>
 8004418:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800441c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004420:	3501      	adds	r5, #1
 8004422:	e7c6      	b.n	80043b2 <_printf_common+0x3e>
 8004424:	18e1      	adds	r1, r4, r3
 8004426:	1c5a      	adds	r2, r3, #1
 8004428:	2030      	movs	r0, #48	@ 0x30
 800442a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800442e:	4422      	add	r2, r4
 8004430:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004434:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004438:	3302      	adds	r3, #2
 800443a:	e7c7      	b.n	80043cc <_printf_common+0x58>
 800443c:	2301      	movs	r3, #1
 800443e:	4622      	mov	r2, r4
 8004440:	4641      	mov	r1, r8
 8004442:	4638      	mov	r0, r7
 8004444:	47c8      	blx	r9
 8004446:	3001      	adds	r0, #1
 8004448:	d0e6      	beq.n	8004418 <_printf_common+0xa4>
 800444a:	3601      	adds	r6, #1
 800444c:	e7d9      	b.n	8004402 <_printf_common+0x8e>
	...

08004450 <_printf_i>:
 8004450:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004454:	7e0f      	ldrb	r7, [r1, #24]
 8004456:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004458:	2f78      	cmp	r7, #120	@ 0x78
 800445a:	4691      	mov	r9, r2
 800445c:	4680      	mov	r8, r0
 800445e:	460c      	mov	r4, r1
 8004460:	469a      	mov	sl, r3
 8004462:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004466:	d807      	bhi.n	8004478 <_printf_i+0x28>
 8004468:	2f62      	cmp	r7, #98	@ 0x62
 800446a:	d80a      	bhi.n	8004482 <_printf_i+0x32>
 800446c:	2f00      	cmp	r7, #0
 800446e:	f000 80d2 	beq.w	8004616 <_printf_i+0x1c6>
 8004472:	2f58      	cmp	r7, #88	@ 0x58
 8004474:	f000 80b9 	beq.w	80045ea <_printf_i+0x19a>
 8004478:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800447c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004480:	e03a      	b.n	80044f8 <_printf_i+0xa8>
 8004482:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004486:	2b15      	cmp	r3, #21
 8004488:	d8f6      	bhi.n	8004478 <_printf_i+0x28>
 800448a:	a101      	add	r1, pc, #4	@ (adr r1, 8004490 <_printf_i+0x40>)
 800448c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004490:	080044e9 	.word	0x080044e9
 8004494:	080044fd 	.word	0x080044fd
 8004498:	08004479 	.word	0x08004479
 800449c:	08004479 	.word	0x08004479
 80044a0:	08004479 	.word	0x08004479
 80044a4:	08004479 	.word	0x08004479
 80044a8:	080044fd 	.word	0x080044fd
 80044ac:	08004479 	.word	0x08004479
 80044b0:	08004479 	.word	0x08004479
 80044b4:	08004479 	.word	0x08004479
 80044b8:	08004479 	.word	0x08004479
 80044bc:	080045fd 	.word	0x080045fd
 80044c0:	08004527 	.word	0x08004527
 80044c4:	080045b7 	.word	0x080045b7
 80044c8:	08004479 	.word	0x08004479
 80044cc:	08004479 	.word	0x08004479
 80044d0:	0800461f 	.word	0x0800461f
 80044d4:	08004479 	.word	0x08004479
 80044d8:	08004527 	.word	0x08004527
 80044dc:	08004479 	.word	0x08004479
 80044e0:	08004479 	.word	0x08004479
 80044e4:	080045bf 	.word	0x080045bf
 80044e8:	6833      	ldr	r3, [r6, #0]
 80044ea:	1d1a      	adds	r2, r3, #4
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6032      	str	r2, [r6, #0]
 80044f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80044f8:	2301      	movs	r3, #1
 80044fa:	e09d      	b.n	8004638 <_printf_i+0x1e8>
 80044fc:	6833      	ldr	r3, [r6, #0]
 80044fe:	6820      	ldr	r0, [r4, #0]
 8004500:	1d19      	adds	r1, r3, #4
 8004502:	6031      	str	r1, [r6, #0]
 8004504:	0606      	lsls	r6, r0, #24
 8004506:	d501      	bpl.n	800450c <_printf_i+0xbc>
 8004508:	681d      	ldr	r5, [r3, #0]
 800450a:	e003      	b.n	8004514 <_printf_i+0xc4>
 800450c:	0645      	lsls	r5, r0, #25
 800450e:	d5fb      	bpl.n	8004508 <_printf_i+0xb8>
 8004510:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004514:	2d00      	cmp	r5, #0
 8004516:	da03      	bge.n	8004520 <_printf_i+0xd0>
 8004518:	232d      	movs	r3, #45	@ 0x2d
 800451a:	426d      	negs	r5, r5
 800451c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004520:	4859      	ldr	r0, [pc, #356]	@ (8004688 <_printf_i+0x238>)
 8004522:	230a      	movs	r3, #10
 8004524:	e011      	b.n	800454a <_printf_i+0xfa>
 8004526:	6821      	ldr	r1, [r4, #0]
 8004528:	6833      	ldr	r3, [r6, #0]
 800452a:	0608      	lsls	r0, r1, #24
 800452c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004530:	d402      	bmi.n	8004538 <_printf_i+0xe8>
 8004532:	0649      	lsls	r1, r1, #25
 8004534:	bf48      	it	mi
 8004536:	b2ad      	uxthmi	r5, r5
 8004538:	2f6f      	cmp	r7, #111	@ 0x6f
 800453a:	4853      	ldr	r0, [pc, #332]	@ (8004688 <_printf_i+0x238>)
 800453c:	6033      	str	r3, [r6, #0]
 800453e:	bf14      	ite	ne
 8004540:	230a      	movne	r3, #10
 8004542:	2308      	moveq	r3, #8
 8004544:	2100      	movs	r1, #0
 8004546:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800454a:	6866      	ldr	r6, [r4, #4]
 800454c:	60a6      	str	r6, [r4, #8]
 800454e:	2e00      	cmp	r6, #0
 8004550:	bfa2      	ittt	ge
 8004552:	6821      	ldrge	r1, [r4, #0]
 8004554:	f021 0104 	bicge.w	r1, r1, #4
 8004558:	6021      	strge	r1, [r4, #0]
 800455a:	b90d      	cbnz	r5, 8004560 <_printf_i+0x110>
 800455c:	2e00      	cmp	r6, #0
 800455e:	d04b      	beq.n	80045f8 <_printf_i+0x1a8>
 8004560:	4616      	mov	r6, r2
 8004562:	fbb5 f1f3 	udiv	r1, r5, r3
 8004566:	fb03 5711 	mls	r7, r3, r1, r5
 800456a:	5dc7      	ldrb	r7, [r0, r7]
 800456c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004570:	462f      	mov	r7, r5
 8004572:	42bb      	cmp	r3, r7
 8004574:	460d      	mov	r5, r1
 8004576:	d9f4      	bls.n	8004562 <_printf_i+0x112>
 8004578:	2b08      	cmp	r3, #8
 800457a:	d10b      	bne.n	8004594 <_printf_i+0x144>
 800457c:	6823      	ldr	r3, [r4, #0]
 800457e:	07df      	lsls	r7, r3, #31
 8004580:	d508      	bpl.n	8004594 <_printf_i+0x144>
 8004582:	6923      	ldr	r3, [r4, #16]
 8004584:	6861      	ldr	r1, [r4, #4]
 8004586:	4299      	cmp	r1, r3
 8004588:	bfde      	ittt	le
 800458a:	2330      	movle	r3, #48	@ 0x30
 800458c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004590:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004594:	1b92      	subs	r2, r2, r6
 8004596:	6122      	str	r2, [r4, #16]
 8004598:	f8cd a000 	str.w	sl, [sp]
 800459c:	464b      	mov	r3, r9
 800459e:	aa03      	add	r2, sp, #12
 80045a0:	4621      	mov	r1, r4
 80045a2:	4640      	mov	r0, r8
 80045a4:	f7ff fee6 	bl	8004374 <_printf_common>
 80045a8:	3001      	adds	r0, #1
 80045aa:	d14a      	bne.n	8004642 <_printf_i+0x1f2>
 80045ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80045b0:	b004      	add	sp, #16
 80045b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045b6:	6823      	ldr	r3, [r4, #0]
 80045b8:	f043 0320 	orr.w	r3, r3, #32
 80045bc:	6023      	str	r3, [r4, #0]
 80045be:	4833      	ldr	r0, [pc, #204]	@ (800468c <_printf_i+0x23c>)
 80045c0:	2778      	movs	r7, #120	@ 0x78
 80045c2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80045c6:	6823      	ldr	r3, [r4, #0]
 80045c8:	6831      	ldr	r1, [r6, #0]
 80045ca:	061f      	lsls	r7, r3, #24
 80045cc:	f851 5b04 	ldr.w	r5, [r1], #4
 80045d0:	d402      	bmi.n	80045d8 <_printf_i+0x188>
 80045d2:	065f      	lsls	r7, r3, #25
 80045d4:	bf48      	it	mi
 80045d6:	b2ad      	uxthmi	r5, r5
 80045d8:	6031      	str	r1, [r6, #0]
 80045da:	07d9      	lsls	r1, r3, #31
 80045dc:	bf44      	itt	mi
 80045de:	f043 0320 	orrmi.w	r3, r3, #32
 80045e2:	6023      	strmi	r3, [r4, #0]
 80045e4:	b11d      	cbz	r5, 80045ee <_printf_i+0x19e>
 80045e6:	2310      	movs	r3, #16
 80045e8:	e7ac      	b.n	8004544 <_printf_i+0xf4>
 80045ea:	4827      	ldr	r0, [pc, #156]	@ (8004688 <_printf_i+0x238>)
 80045ec:	e7e9      	b.n	80045c2 <_printf_i+0x172>
 80045ee:	6823      	ldr	r3, [r4, #0]
 80045f0:	f023 0320 	bic.w	r3, r3, #32
 80045f4:	6023      	str	r3, [r4, #0]
 80045f6:	e7f6      	b.n	80045e6 <_printf_i+0x196>
 80045f8:	4616      	mov	r6, r2
 80045fa:	e7bd      	b.n	8004578 <_printf_i+0x128>
 80045fc:	6833      	ldr	r3, [r6, #0]
 80045fe:	6825      	ldr	r5, [r4, #0]
 8004600:	6961      	ldr	r1, [r4, #20]
 8004602:	1d18      	adds	r0, r3, #4
 8004604:	6030      	str	r0, [r6, #0]
 8004606:	062e      	lsls	r6, r5, #24
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	d501      	bpl.n	8004610 <_printf_i+0x1c0>
 800460c:	6019      	str	r1, [r3, #0]
 800460e:	e002      	b.n	8004616 <_printf_i+0x1c6>
 8004610:	0668      	lsls	r0, r5, #25
 8004612:	d5fb      	bpl.n	800460c <_printf_i+0x1bc>
 8004614:	8019      	strh	r1, [r3, #0]
 8004616:	2300      	movs	r3, #0
 8004618:	6123      	str	r3, [r4, #16]
 800461a:	4616      	mov	r6, r2
 800461c:	e7bc      	b.n	8004598 <_printf_i+0x148>
 800461e:	6833      	ldr	r3, [r6, #0]
 8004620:	1d1a      	adds	r2, r3, #4
 8004622:	6032      	str	r2, [r6, #0]
 8004624:	681e      	ldr	r6, [r3, #0]
 8004626:	6862      	ldr	r2, [r4, #4]
 8004628:	2100      	movs	r1, #0
 800462a:	4630      	mov	r0, r6
 800462c:	f7fb fdd8 	bl	80001e0 <memchr>
 8004630:	b108      	cbz	r0, 8004636 <_printf_i+0x1e6>
 8004632:	1b80      	subs	r0, r0, r6
 8004634:	6060      	str	r0, [r4, #4]
 8004636:	6863      	ldr	r3, [r4, #4]
 8004638:	6123      	str	r3, [r4, #16]
 800463a:	2300      	movs	r3, #0
 800463c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004640:	e7aa      	b.n	8004598 <_printf_i+0x148>
 8004642:	6923      	ldr	r3, [r4, #16]
 8004644:	4632      	mov	r2, r6
 8004646:	4649      	mov	r1, r9
 8004648:	4640      	mov	r0, r8
 800464a:	47d0      	blx	sl
 800464c:	3001      	adds	r0, #1
 800464e:	d0ad      	beq.n	80045ac <_printf_i+0x15c>
 8004650:	6823      	ldr	r3, [r4, #0]
 8004652:	079b      	lsls	r3, r3, #30
 8004654:	d413      	bmi.n	800467e <_printf_i+0x22e>
 8004656:	68e0      	ldr	r0, [r4, #12]
 8004658:	9b03      	ldr	r3, [sp, #12]
 800465a:	4298      	cmp	r0, r3
 800465c:	bfb8      	it	lt
 800465e:	4618      	movlt	r0, r3
 8004660:	e7a6      	b.n	80045b0 <_printf_i+0x160>
 8004662:	2301      	movs	r3, #1
 8004664:	4632      	mov	r2, r6
 8004666:	4649      	mov	r1, r9
 8004668:	4640      	mov	r0, r8
 800466a:	47d0      	blx	sl
 800466c:	3001      	adds	r0, #1
 800466e:	d09d      	beq.n	80045ac <_printf_i+0x15c>
 8004670:	3501      	adds	r5, #1
 8004672:	68e3      	ldr	r3, [r4, #12]
 8004674:	9903      	ldr	r1, [sp, #12]
 8004676:	1a5b      	subs	r3, r3, r1
 8004678:	42ab      	cmp	r3, r5
 800467a:	dcf2      	bgt.n	8004662 <_printf_i+0x212>
 800467c:	e7eb      	b.n	8004656 <_printf_i+0x206>
 800467e:	2500      	movs	r5, #0
 8004680:	f104 0619 	add.w	r6, r4, #25
 8004684:	e7f5      	b.n	8004672 <_printf_i+0x222>
 8004686:	bf00      	nop
 8004688:	080047d9 	.word	0x080047d9
 800468c:	080047ea 	.word	0x080047ea

08004690 <memmove>:
 8004690:	4288      	cmp	r0, r1
 8004692:	b510      	push	{r4, lr}
 8004694:	eb01 0402 	add.w	r4, r1, r2
 8004698:	d902      	bls.n	80046a0 <memmove+0x10>
 800469a:	4284      	cmp	r4, r0
 800469c:	4623      	mov	r3, r4
 800469e:	d807      	bhi.n	80046b0 <memmove+0x20>
 80046a0:	1e43      	subs	r3, r0, #1
 80046a2:	42a1      	cmp	r1, r4
 80046a4:	d008      	beq.n	80046b8 <memmove+0x28>
 80046a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80046ae:	e7f8      	b.n	80046a2 <memmove+0x12>
 80046b0:	4402      	add	r2, r0
 80046b2:	4601      	mov	r1, r0
 80046b4:	428a      	cmp	r2, r1
 80046b6:	d100      	bne.n	80046ba <memmove+0x2a>
 80046b8:	bd10      	pop	{r4, pc}
 80046ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80046be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80046c2:	e7f7      	b.n	80046b4 <memmove+0x24>

080046c4 <_sbrk_r>:
 80046c4:	b538      	push	{r3, r4, r5, lr}
 80046c6:	4d06      	ldr	r5, [pc, #24]	@ (80046e0 <_sbrk_r+0x1c>)
 80046c8:	2300      	movs	r3, #0
 80046ca:	4604      	mov	r4, r0
 80046cc:	4608      	mov	r0, r1
 80046ce:	602b      	str	r3, [r5, #0]
 80046d0:	f7fc ff8c 	bl	80015ec <_sbrk>
 80046d4:	1c43      	adds	r3, r0, #1
 80046d6:	d102      	bne.n	80046de <_sbrk_r+0x1a>
 80046d8:	682b      	ldr	r3, [r5, #0]
 80046da:	b103      	cbz	r3, 80046de <_sbrk_r+0x1a>
 80046dc:	6023      	str	r3, [r4, #0]
 80046de:	bd38      	pop	{r3, r4, r5, pc}
 80046e0:	200002dc 	.word	0x200002dc

080046e4 <memcpy>:
 80046e4:	440a      	add	r2, r1
 80046e6:	4291      	cmp	r1, r2
 80046e8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80046ec:	d100      	bne.n	80046f0 <memcpy+0xc>
 80046ee:	4770      	bx	lr
 80046f0:	b510      	push	{r4, lr}
 80046f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046fa:	4291      	cmp	r1, r2
 80046fc:	d1f9      	bne.n	80046f2 <memcpy+0xe>
 80046fe:	bd10      	pop	{r4, pc}

08004700 <_realloc_r>:
 8004700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004704:	4680      	mov	r8, r0
 8004706:	4615      	mov	r5, r2
 8004708:	460c      	mov	r4, r1
 800470a:	b921      	cbnz	r1, 8004716 <_realloc_r+0x16>
 800470c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004710:	4611      	mov	r1, r2
 8004712:	f7ff bc4b 	b.w	8003fac <_malloc_r>
 8004716:	b92a      	cbnz	r2, 8004724 <_realloc_r+0x24>
 8004718:	f7ff fbdc 	bl	8003ed4 <_free_r>
 800471c:	2400      	movs	r4, #0
 800471e:	4620      	mov	r0, r4
 8004720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004724:	f000 f81a 	bl	800475c <_malloc_usable_size_r>
 8004728:	4285      	cmp	r5, r0
 800472a:	4606      	mov	r6, r0
 800472c:	d802      	bhi.n	8004734 <_realloc_r+0x34>
 800472e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004732:	d8f4      	bhi.n	800471e <_realloc_r+0x1e>
 8004734:	4629      	mov	r1, r5
 8004736:	4640      	mov	r0, r8
 8004738:	f7ff fc38 	bl	8003fac <_malloc_r>
 800473c:	4607      	mov	r7, r0
 800473e:	2800      	cmp	r0, #0
 8004740:	d0ec      	beq.n	800471c <_realloc_r+0x1c>
 8004742:	42b5      	cmp	r5, r6
 8004744:	462a      	mov	r2, r5
 8004746:	4621      	mov	r1, r4
 8004748:	bf28      	it	cs
 800474a:	4632      	movcs	r2, r6
 800474c:	f7ff ffca 	bl	80046e4 <memcpy>
 8004750:	4621      	mov	r1, r4
 8004752:	4640      	mov	r0, r8
 8004754:	f7ff fbbe 	bl	8003ed4 <_free_r>
 8004758:	463c      	mov	r4, r7
 800475a:	e7e0      	b.n	800471e <_realloc_r+0x1e>

0800475c <_malloc_usable_size_r>:
 800475c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004760:	1f18      	subs	r0, r3, #4
 8004762:	2b00      	cmp	r3, #0
 8004764:	bfbc      	itt	lt
 8004766:	580b      	ldrlt	r3, [r1, r0]
 8004768:	18c0      	addlt	r0, r0, r3
 800476a:	4770      	bx	lr

0800476c <_init>:
 800476c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800476e:	bf00      	nop
 8004770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004772:	bc08      	pop	{r3}
 8004774:	469e      	mov	lr, r3
 8004776:	4770      	bx	lr

08004778 <_fini>:
 8004778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800477a:	bf00      	nop
 800477c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800477e:	bc08      	pop	{r3}
 8004780:	469e      	mov	lr, r3
 8004782:	4770      	bx	lr
